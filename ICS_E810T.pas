unit ICS_E810T;

interface

//uses
//  Forms;//, ComObj, ComCtrls, Classes, Controls, StdCtrls, Dialogs, SysUtils;//, ActiveX;//, AxCtrls;
//  , Windows, Messages, Variants, Graphics;

type
  TIKC_E810T = class (TObject)
  private
    function GetPropertiesAutoUpdateMod: boolean;
    procedure SetPropertiesAutoUpdateMod(AutoUpdateMode: boolean = false);
    function GetUseVirtualPort: boolean;
    procedure SetUseVirtualPort(UseVirtualPort: boolean = false);
    function GetVirtualPortOpened: boolean;
    function GetTapeAnalizer: boolean;
    procedure SetTapeAnalizer(TapeAnalizer: boolean = true);
    function GetCodepageOEM: boolean;
    procedure SetCodepageOEM(CodepageOEM: boolean = false);
    function GetLangID: byte;
    procedure SetLangID(LangID: byte = 1);
    function GetRepeatCount: byte;
    procedure SetRepeatCount(RepeatCount: byte = 2);
    function GetLogRecording: boolean;
    procedure SetLogRecording(LogRecording: boolean = false);
    function GetAnswerWaiting: byte;
    procedure SetAnswerWaiting(AnswerWaiting: byte = 10);
    function GetStatusByte: byte;
    function GetResultByte: byte;
    function GetReserveByte: byte;
    function GetErrorText: string;
    function GetPrinterError: boolean;
    function GetTapeEnded: boolean;
    function GetTapeNearEnd: boolean;
    function GetItemCost: Longint;
    function GetSumTotal: Longint;
    function GetSumBalance: Longint;
    function GetItemCostStr: string;
    function GetSumTotalStr: string;
    function GetSumBalanceStr: string;
    function GetSumDiscount: Longint;
    function GetSumDiscountStr: string;
    function GetSumMarkup: Longint;
    function GetSumMarkupStr: string;
    function GetKSEFPacket: Cardinal;
    function GetKSEFPacketStr: string;
    function GetCurrentDate: TDateTime;
    function GetCurrentDateStr: string;
    function GetCurrentTime: TDateTime;
    function GetCurrentTimeStr: string;
    function GetModemError: byte;
    function GetTaxRatesCount: byte; // оличество используемых налоговых групп.
    procedure SetTaxRatesCount(TaxRatesCount: byte); // оличество используемых налоговых групп.
    function GetAddTaxType: boolean; //“ип налога: false Ц вложенный; true Ц наложенный
    procedure SetAddTaxType(AddTaxType: boolean); //“ип налога: false Ц вложенный; true Ц наложенный
    function GetTaxRate1: integer;
    function GetTaxRate2: integer;
    function GetTaxRate3: integer;
    function GetTaxRate4: integer;
    function GetTaxRate5: integer;
    function GetTaxRate6: integer;
    procedure SetTaxRate1(const Value: integer);
    procedure SetTaxRate2(const Value: integer);
    procedure SetTaxRate3(const Value: integer);
    procedure SetTaxRate4(const Value: integer);
    procedure SetTaxRate5(const Value: integer);
    function GetUsedAdditionalFee: boolean;
    procedure SetUsedAdditionalFee(const Value: boolean);
    function GetAddFeeRate1: integer;
    function GetAddFeeRate2: integer;
    function GetAddFeeRate3: integer;
    function GetAddFeeRate4: integer;
    function GetAddFeeRate5: integer;
    function GetAddFeeRate6: integer;
    procedure SetAddFeeRate1(const Value: integer);
    procedure SetAddFeeRate2(const Value: integer);
    procedure SetAddFeeRate3(const Value: integer);
    procedure SetAddFeeRate4(const Value: integer);
    procedure SetAddFeeRate5(const Value: integer);
    procedure SetAddFeeRate6(const Value: integer);
    function GetTaxOnAddFee1: boolean;
    function GetTaxOnAddFee2: boolean;
    function GetTaxOnAddFee3: boolean;
    function GetTaxOnAddFee4: boolean;
    function GetTaxOnAddFee5: boolean;
    function GetTaxOnAddFee6: boolean;
    procedure SetTaxOnAddFee1(const Value: boolean);
    procedure SetTaxOnAddFee2(const Value: boolean);
    procedure SetTaxOnAddFee3(const Value: boolean);
    procedure SetTaxOnAddFee4(const Value: boolean);
    procedure SetTaxOnAddFee5(const Value: boolean);
    procedure SetTaxOnAddFee6(const Value: boolean);
    function GetAddFeeOnRetailPrice1: boolean;
    function GetAddFeeOnRetailPrice2: boolean;
    function GetAddFeeOnRetailPrice3: boolean;
    function GetAddFeeOnRetailPrice4: boolean;
    function GetAddFeeOnRetailPrice5: boolean;
    function GetAddFeeOnRetailPrice6: boolean;
    procedure SetAddFeeOnRetailPrice1(const Value: boolean);
    procedure SetAddFeeOnRetailPrice2(const Value: boolean);
    procedure SetAddFeeOnRetailPrice3(const Value: boolean);
    procedure SetAddFeeOnRetailPrice4(const Value: boolean);
    procedure SetAddFeeOnRetailPrice5(const Value: boolean);
    procedure SetAddFeeOnRetailPrice6(const Value: boolean);
    function GetTaxRatesDate: TDateTime;
    function GetTaxRatesDateStr: string;
    function GetNamePaymentForm1: string;
    function GetNamePaymentForm10: string;
    function GetNamePaymentForm2: string;
    function GetNamePaymentForm3: string;
    function GetNamePaymentForm4: string;
    function GetNamePaymentForm5: string;
    function GetNamePaymentForm6: string;
    function GetNamePaymentForm7: string;
    function GetNamePaymentForm8: string;
    function GetNamePaymentForm9: string;
    function GetCashDrawerSum: Longint;
    function GetCashDrawerSumStr: string;
    function GetCurrentZReport: integer;
    function GetCurrentZReportStr: string;
    function GetDayEndDate: TDateTime;
    function GetDayEndDateStr: string;
    function GetDayEndTime: TDateTime;
    function GetDayEndTimeStr: string;
    function GetItemsCount: Integer;
    function GetItemsCountStr: string;
    function GetLastZReportDate: TDateTime;
    function GetLastZReportDateStr: string;
    function GetItemName: string;
    function GetItemPrice: integer;
    function GetItemRefundQtyPrecision: byte;
    function GetItemRefundQuantity: integer;
    function GetItemRefundSum: Longint;
    function GetItemRefundSumStr: string;
    function GetItemSaleQtyPrecision: byte;
    function GetItemSaleQuantity: integer;
    function GetItemSaleSum: Longint;
    function GetItemSaleSumStr: string;
    function GetItemTax: byte;
    function GetDayRefundReceiptsCount: integer;
    function GetDayRefundReceiptsCountStr: string;
    function GetDaySaleReceiptsCount: integer;
    function GetDaySaleReceiptsCountStr: string;
    function GetDaySaleSumOnTax1: Cardinal;
    function GetDaySaleSumOnTax1Str: string;
    function GetDaySaleSumOnTax2: Cardinal;
    function GetDaySaleSumOnTax2Str: string;
    function GetDaySaleSumOnTax3: Cardinal;
    function GetDaySaleSumOnTax3Str: string;
    function GetDaySaleSumOnTax4: Cardinal;
    function GetDaySaleSumOnTax4Str: string;
    function GetDaySaleSumOnTax5: Cardinal;
    function GetDaySaleSumOnTax5Str: string;
    function GetDaySaleSumOnTax6: Cardinal;
    function GetDaySaleSumOnTax6Str: string;
    function GetDayRefundSumOnTax1: Cardinal;
    function GetDayRefundSumOnTax1Str: string;
    function GetDayRefundSumOnTax2: Cardinal;
    function GetDayRefundSumOnTax2Str: string;
    function GetDayRefundSumOnTax3: Cardinal;
    function GetDayRefundSumOnTax3Str: string;
    function GetDayRefundSumOnTax4: Cardinal;
    function GetDayRefundSumOnTax4Str: string;
    function GetDayRefundSumOnTax5: Cardinal;
    function GetDayRefundSumOnTax5Str: string;
    function GetDayRefundSumOnTax6: Cardinal;
    function GetDayRefundSumOnTax6Str: string;
    function GetDaySaleSumOnPayForm1: Cardinal;
    function GetDaySaleSumOnPayForm10: Cardinal;
    function GetDaySaleSumOnPayForm10Str: string;
    function GetDaySaleSumOnPayForm1Str: string;
    function GetDaySaleSumOnPayForm2: Cardinal;
    function GetDaySaleSumOnPayForm2Str: string;
    function GetDaySaleSumOnPayForm3: Cardinal;
    function GetDaySaleSumOnPayForm3Str: string;
    function GetDaySaleSumOnPayForm4: Cardinal;
    function GetDaySaleSumOnPayForm4Str: string;
    function GetDaySaleSumOnPayForm5: Cardinal;
    function GetDaySaleSumOnPayForm5Str: string;
    function GetDaySaleSumOnPayForm6: Cardinal;
    function GetDaySaleSumOnPayForm6Str: string;
    function GetDaySaleSumOnPayForm7: Cardinal;
    function GetDaySaleSumOnPayForm7Str: string;
    function GetDaySaleSumOnPayForm8: Cardinal;
    function GetDaySaleSumOnPayForm8Str: string;
    function GetDaySaleSumOnPayForm9: Cardinal;
    function GetDaySaleSumOnPayForm9Str: string;
    function GetDayRefundSumOnPayForm1: Cardinal;
    function GetDayRefundSumOnPayForm10: Cardinal;
    function GetDayRefundSumOnPayForm2: Cardinal;
    function GetDayRefundSumOnPayForm3: Cardinal;
    function GetDayRefundSumOnPayForm4: Cardinal;
    function GetDayRefundSumOnPayForm5: Cardinal;
    function GetDayRefundSumOnPayForm6: Cardinal;
    function GetDayRefundSumOnPayForm7: Cardinal;
    function GetDayRefundSumOnPayForm8: Cardinal;
    function GetDayRefundSumOnPayForm9: Cardinal;
    function GetDayRefundSumOnPayForm10Str: string;
    function GetDayRefundSumOnPayForm1Str: string;
    function GetDayRefundSumOnPayForm2Str: string;
    function GetDayRefundSumOnPayForm3Str: string;
    function GetDayRefundSumOnPayForm4Str: string;
    function GetDayRefundSumOnPayForm5Str: string;
    function GetDayRefundSumOnPayForm6Str: string;
    function GetDayRefundSumOnPayForm7Str: string;
    function GetDayRefundSumOnPayForm8Str: string;
    function GetDayRefundSumOnPayForm9Str: string;
    function GetDayDiscountSumOnRefunds: Cardinal;
    function GetDayDiscountSumOnRefundsStr: string;
    function GetDayDiscountSumOnSales: Cardinal;
    function GetDayDiscountSumOnSalesStr: string;
    function GetDayMarkupSumOnSales: Cardinal;
    function GetDayMarkupSumOnRefunds: Cardinal;
    function GetDayMarkupSumOnSalesStr: string;
    function GetDayMarkupSumOnRefundsStr: string;
    function GetDayCashInSum: Cardinal;
    function GetDayCashInSumStr: string;
    function GetDayCashOutSum: Cardinal;
    function GetDayCashOutSumStr: string;
    function GetCurReceiptTax1Sum: Cardinal;
    function GetCurReceiptTax2Sum: Cardinal;
    function GetCurReceiptTax3Sum: Cardinal;
    function GetCurReceiptTax4Sum: Cardinal;
    function GetCurReceiptTax5Sum: Cardinal;
    function GetCurReceiptTax6Sum: Cardinal;
    function GetCurReceiptTax1SumStr: string;
    function GetCurReceiptTax2SumStr: string;
    function GetCurReceiptTax3SumStr: string;
    function GetCurReceiptTax4SumStr: string;
    function GetCurReceiptTax5SumStr: string;
    function GetCurReceiptTax6SumStr: string;
    function GetCurReceiptPayForm10Sum: Cardinal;
    function GetCurReceiptPayForm1Sum: Cardinal;
    function GetCurReceiptPayForm2Sum: Cardinal;
    function GetCurReceiptPayForm3Sum: Cardinal;
    function GetCurReceiptPayForm4Sum: Cardinal;
    function GetCurReceiptPayForm5Sum: Cardinal;
    function GetCurReceiptPayForm6Sum: Cardinal;
    function GetCurReceiptPayForm7Sum: Cardinal;
    function GetCurReceiptPayForm8Sum: Cardinal;
    function GetCurReceiptPayForm9Sum: Cardinal;
    function GetCurReceiptPayForm10SumStr: string;
    function GetCurReceiptPayForm1SumStr: string;
    function GetCurReceiptPayForm2SumStr: string;
    function GetCurReceiptPayForm3SumStr: string;
    function GetCurReceiptPayForm4SumStr: string;
    function GetCurReceiptPayForm5SumStr: string;
    function GetCurReceiptPayForm6SumStr: string;
    function GetCurReceiptPayForm7SumStr: string;
    function GetCurReceiptPayForm8SumStr: string;
    function GetCurReceiptPayForm9SumStr: string;
    function GetDayAnnuledSaleReceiptsCount: Integer;
    function GetDayAnnuledSaleReceiptsCountStr: string;
    function GetDayAnnuledSaleReceiptsSum: Cardinal;
    function GetDayAnnuledSaleReceiptsSumStr: string;
    function GetDayAnnuledRefundReceiptsCount: integer;
    function GetDayAnnuledRefundReceiptsCountStr: string;
    function GetDayAnnuledRefundReceiptsSum: Cardinal;
    function GetDayAnnuledRefundReceiptsSumStr: string;
    function GetDaySaleCancelingsCount: Integer;
    function GetDaySaleCancelingsCountStr: string;
    function GetDaySaleCancelingsSum: Cardinal;
    function GetDaySaleCancelingsSumStr: String;
    function GetDayRefundCancelingsCount: Integer;
    function GetDayRefundCancelingsCountStr: string;
    function GetDayRefundCancelingsSum: Cardinal;
    function GetDayRefundCancelingsSumStr: string;
    function GetDaySumAddTaxOfSale1: Cardinal;
    function GetDaySumAddTaxOfSale2: Cardinal;
    function GetDaySumAddTaxOfSale3: Cardinal;
    function GetDaySumAddTaxOfSale4: Cardinal;
    function GetDaySumAddTaxOfSale5: Cardinal;
    function GetDaySumAddTaxOfSale6: Cardinal;
    function GetDaySumAddTaxOfSale1Str: string;
    function GetDaySumAddTaxOfSale2Str: string;
    function GetDaySumAddTaxOfSale3Str: string;
    function GetDaySumAddTaxOfSale4Str: string;
    function GetDaySumAddTaxOfSale5Str: string;
    function GetDaySumAddTaxOfSale6Str: string;
    function GetDaySumAddTaxOfRefund1: Cardinal;
    function GetDaySumAddTaxOfRefund2: Cardinal;
    function GetDaySumAddTaxOfRefund3: Cardinal;
    function GetDaySumAddTaxOfRefund4: Cardinal;
    function GetDaySumAddTaxOfRefund5: Cardinal;
    function GetDaySumAddTaxOfRefund6: Cardinal;
    function GetDaySumAddTaxOfRefund1Str: string;
    function GetDaySumAddTaxOfRefund2Str: string;
    function GetDaySumAddTaxOfRefund3Str: string;
    function GetDaySumAddTaxOfRefund4Str: string;
    function GetDaySumAddTaxOfRefund5Str: string;
    function GetDaySumAddTaxOfRefund6Str: string;
    function GetSerialNumber: string;
    function GetFiscalNumber: string;
    function GetTaxNumber: string;
    function GetDateFiscalization: TDateTime;
    function GetDateFiscalizationStr: string;
    function GetTimeFiscalization: TDateTime;
    function GetTimeFiscalizationStr: string;
    function GetHardwareVersion: string;
    function GetHeadLine1: string;
    function GetHeadLine2: string;
    function GetHeadLine3: string;
    function GetUseAdditionalFee: boolean;
    function GetUseAdditionalTax: boolean;
    function GetUseCutter: boolean;
    function GetUseFontB: boolean;
    function GetUseTradeLogo: boolean;
    function GetCashDrawerIsOpened: boolean;
    function GetFailureLastCommand: boolean;
    function GetFiscalMode: boolean;
    function GetOnlinePrintMode: boolean;
    function GetReceiptIsOpened: boolean;
    function GetPaymentMode: boolean;
    function GetDisplayShowSumMode: boolean;
    function GetRefundReceiptMode: boolean;
    function GetServiceReceiptMode: boolean;
    function GetUserPassword: byte;
    function GetUserPasswordStr: string;
    function GetFPDriverBuildVersion: byte;
    function GetFPDriverMajorVersion: byte;
    function GetFPDriverMinorVersion: byte;
    function GetFPDriverReleaseVersion: byte;
    function GetKsefSavePath: string;
    procedure SetKsefSavePath(const Value: string);
    function GetPropertiesModemAutoUpdateMode: boolean;
    procedure SetPropertiesModemAutoUpdateMode(const Value: boolean);
    function GetModemCodepageOEM: boolean;
    procedure SetModemCodepageOEM(const Value: boolean);
    function GetModemLangID: byte;
    procedure SetModemLangID(const Value: byte);
    function GetModemRepeatCount: byte;
    procedure SetModemRepeatCount(const Value: byte);
    function GetModemLogRecording: boolean;
    procedure SetModemLogRecording(const Value: boolean);
    function GetModemAnswerWaiting: byte;
    procedure SetModemAnswerWaiting(const Value: byte);
    function GetModemKsefSavePath: string;
    procedure SetModemKsefSavePath(const Value: string);
    function GetModemErrorCode: byte;
    function GetModemErrorText: string;
    function GetModemWorkSecondCount: Longint;
    function GetFPExchangeModemSecondCount: Longint;
    function GetModemFirstUnsendPIDDateTime: TDateTime;
    function GetModemFirstUnsendPIDDateTimeStr: string;
    function GetModemPID_Unused: Longint;
    function GetModemPID_CurPers: Longint;
    function GetModemPID_LastWrite: Longint;
    function GetModemPID_LastSign: Longint;
    function GetModemPID_LastSend: Longint;
    function GetModemSerialNumber: Longint;
    function GetModemID_DEV: Longint;
    function GetModemID_SAM: Longint;
    function GetModemNT_SESSION: Longint;
    function GetModemFailCode: byte;
    function GetModemRes1: byte; virtual; abstract;
    function GetModemBatVoltage: Longint; virtual; abstract;
    function GetModemDCVoltage: Longint; virtual; abstract;
    function GetModemBatCurrent: Longint; virtual; abstract;
    function GetModemTemperature: Longint; virtual; abstract;
    function GetModemState1: byte; virtual; abstract;
    function GetModemState2: byte; virtual; abstract;
    function GetModemState3: byte;
    function GetModemLanState1: byte;
    function GetModemLanState2: byte;
    function GetModemFPExchangeResult: byte;
    function GetModemACQExchangeResult: byte;
    function GetModemRes2: byte; virtual; abstract;
    function GetModemFPExchangeErrorCount: Longint;
    function GetModemRSSI: byte; virtual; abstract;
    function GetModemRSSI_BER: byte; virtual; abstract;
    function GetModemUSSDResult: string; virtual; abstract;
    function GetModemOSVer: Longint;
    function GetModemOSRev: Longint;
    function GetModemSysTime: TDateTime;
    function GetModemSysTimeStr: string;
    function GetModemNETIPAddr: string;
    function GetModemNETGate: string;
    function GetModemNETMask: string;
    function GetModemMODIPAddr: string; virtual; abstract;
    function GetModemACQIPAddr: string;
    function GetModemACQPort: Longint;
    function GetModemACQExchangeSecondCount: Longint;
    function GetModemFoundPacket: Cardinal;
    function GetModemFoundPacketStr: string;
    function GetModemCurrentTaskCode: byte;
    function GetModemCurrentTaskText: string;
    function GetModemDriverMajorVersion: Byte;
    function GetModemDriverMinorVersion: byte;
    function GetModemDriverReleaseVersion: byte;
    function GetModemDriverBuildVersion: byte;
    function GetFiscalDayIsOpened: boolean;

  public
    function FPInitialize: Longint; //ћетод выполн€ет начальную инициализацию параметров драйвера.
                                    //ƒолжен вызыватьс€ сразу после создани€ объекта драйвера.
                                    //¬озвращает 0, если инициализаци€ прошла или код ошибки в соответствии с функцией GetLastError() или GetLastWin32Error()
    function FPOpen(_COMport: string;
                    baudRate: integer = 9600;
                    readTimeout: string = '3';
                    writeTimeout: string = '3'): boolean; //ћетод открывает коммуникационный порт и устанавливает настройки порта дл€ св€зи с ‘–.
                                                          //¬ случае успешного выполнени€ метод возвращает true.
    function FPOpenStr(_COMport: string;
                    baudRate: integer = 9600;
                    readTimeout: string = '3';
                    writeTimeout: string = '3'): boolean; //ћетод открывает коммуникационный порт и устанавливает настройки порта дл€ св€зи с ‘–. ¬ случае успешного выполнени€ метод возвращает true.
    function FPClose: boolean; //ћетод выполн€ет закрытие коммуникационного соединени€ открытого методами FPOpen или FPOpenStr.
                               //≈го необходимо выполн€ть в самом конце работы с ‘–. ¬ случае успешного выполнени€ метод возвращает true
    function FPSetPassword(userID: byte;
                           oldPassword: word;
                           newPassword: word): boolean; //ћетод выполн€ет установку новых паролей кассиров, парол€ режима программировани€ и пароль режима отчЄтов. ¬ случае успешного выполнени€ метод возвращает true
    function FPRegisterCashier(cashierID: byte;
                               name: string;
                               password: word): boolean; //ћетод выполн€ет регистрацию кассира на ‘– с дальнейшей печатью его имени в чеках. ≈сли им€ кассира Ц пуста€ строка, то выполн€етс€ отмена регистрации кассира.
                                                         //¬ случае успешного выполнени€ метод возвращает true
    function FPRefundItem(qty: integer;
                          qtyPrecision: byte;
                          printEAN13: boolean;
                          printSingleQty: boolean;
                          printFromMemory: boolean;
                          itemPrice: integer;
                          itemTax: byte;
                          itemName: string;
                          itemCode: Longint): boolean; //ћетод выполн€ет регистрацию возврата или приЄмки товара в чеке выплат. ¬ случае успешного выполнени€ метод возвращает true
    function FPRefundItemStr(qty: integer;
                             qtyPrecision: byte;
                             printEAN13: boolean;
                             printSingleQty: boolean;
                             printFromMemory: boolean;
                             itemPrice: integer;
                             itemTax: byte;
                             itemName: string;
                             itemCode: string): boolean; //ћетод аналогичен FPRefundItem и выполн€ет регистрацию возврата или приЄмки товара в чеке выплат.
                                                          //–екомендуетс€ дл€ использовани€ в случае, если среда разработки не поддерживает
                                                          //тип __int64 (1—:ѕредпри€тие 8.x). ¬ случае успешного выполнени€ метод возвращает true
    function FPSaleItem(qty: integer;
                        qtyPrecision: byte;
                        printEAN13: boolean;
                        printSingleQty: boolean;
                        printFromMemory: boolean;
                        itemPrice: integer;
                        itemTax: byte;
                        itemName: string;
                        itemCode: Longint): boolean; //ћетод выполн€ет регистрацию продажи товара в чеке продаж. ¬ случае успешного выполнени€ метод возвращает true
    function FPSaleItemStr(qty: integer;
                        qtyPrecision: byte;
                        printEAN13: boolean;
                        printSingleQty: boolean;
                        printFromMemory: boolean;
                        itemPrice: integer;
                        itemTax: byte;
                        itemName: string;
                        itemCode: string): boolean; //ћетод аналогичен FPSaleItem и выполн€ет регистрацию продажи товара в чеке продаж.
                                                    //–екомендуетс€ дл€ использовани€ в случае, если среда разработки не поддерживает
                                                    //тип __int64 (1—:ѕредпри€тие 8.x). ¬ случае успешного выполнени€ метод возвращает true
    function FPCommentLine(commentLine: string;
                           openRefundReceipt: boolean=false): boolean;virtual; //ћетод выполн€ет регистрацию текстовой строки комментари€ в чеке продаж и выплат.
                                                                       // оличество текстовых строк ограничено максимальным количеством товарных позиций в одном чеке дл€ каждой модели ‘–.
                                                                       //¬ случае успешного выполнени€ метод возвращает true.
    function FPPrintZeroReceipt: boolean; //ћетод выполн€ет печать нулевого чека дл€ открыти€ новой смены в ‘–. ¬ случае успешного выполнени€ метод возвращает true
    function FPLineFeed: boolean; //ћетод выполн€ет прот€жку ленты ‘– на одну строку. ¬ случае успешного выполнени€ метод возвращает true.
    function FPAnnulReceipt: boolean; //ћетод выполн€ет отмену текущего чека без возможности восстановлени€. ¬ случае успешного выполнени€ метод возвращает true.
    function FPCashIn(cashSum: Cardinal): boolean; //ћетод выполн€ет операцию служебного внесени€ суммы денег в кассу с последующей печатью отчЄта. ¬ случае успешного выполнени€ метод возвращает true
    function FPCashOut(cashSum: Cardinal): boolean; //ћетод выполн€ет операцию служебного изъ€ти€ суммы денег из кассы с последующей печатью отчЄта. ¬ случае успешного выполнени€ метод возвращает true
    function FPPayment(paymentForm: byte;
                       paymentSum:  integer;
                       autoCloseReceipt: boolean;
                       asFiscalReceipt: boolean;
                       authCode: string): boolean; //ћетод выполн€ет полную или частичную оплату чека продаж или выплат по определЄнной форме оплаты
    function FPSetAdvHeaderLine(lineID: byte;
                                textLine: string;
                                isDoubleWidth: boolean;
                                isDoubleHeight: boolean): boolean; //ћетод выполн€ет запись дополнительных строк заголовка чека. ¬ случае успешного выполнени€ метод возвращает true
    function FPSetAdvTrailerLine(lineID: byte;
                                 textLine: string;
                                 isDoubleWidth: boolean = false;
                                 isDoubleHeight: boolean = false): boolean; //ћетод выполн€ет запись дополнительных строк подвала чека. ¬ случае успешного выполнени€ метод возвращает true
    function FPSetLineCustomerDisplay(lineID: byte;
                                      textLine: string): boolean; //ћетод выполн€ет вывод строки на информационный дисплей покупател€. ¬ случае успешного выполнени€ метод возвращает true.
    function FPSetCurrentDate(currentDate: TDateTime): boolean; //ћетод выполн€ет установку даты в ‘–. ¬ случае успешного выполнени€ метод возвращает true.
    function FPSetCurrentDateStr(currentDateStr: string): boolean; //ћетод выполн€ет установку даты в ‘–. –аботает аналогично методу FPSetCurrentDate. ¬ случае успешного выполнени€ метод возвращает true.
    function FPGetCurrentDate: boolean; //ћетод выполн€ет чтение текущей даты ‘– в св€занные с методом свойства.
                                        //¬ случае успешного выполнени€ метод возвращает true.
    function FPSetCurrentTime(currentTime: TDateTime): boolean; //ћетод выполн€ет установку времени в ‘–. ћетод доступен только после выполнени€ Z-отчЄта.
                                                                //¬ случае успешного выполнени€ метод возвращает true.
    function FPSetCurrentTimeStr(currentTimeStr: string): boolean; //ћетод выполн€ет установку времени в ‘–. –аботает аналогично методу FPSetCurrentTime.
                                                                   //ћетод доступен только после выполнени€ Z-отчЄта. ¬ случае успешного выполнени€ метод возвращает true.
    function FPGetCurrentTime: boolean; //ћетод выполн€ет чтение текущего времени ‘– в св€занные с методом свойства.
                                        //¬ случае успешного выполнени€ метод возвращает true.
    function FPOpenCashDrawer(duration: integer): boolean; //ћетод выполн€ет открытие денежного €щика, подключенного к ‘–.
                                                           //ƒлительность импульса зависит от сопротивлени€ катушки соленоида денежного €щика
                                                           //или напр€жени€, на которое он рассчитан. ¬ случае успешного выполнени€ метод возвращает true.
    function FPPrintHardwareVersion: boolean; //ћетод выполн€ет печать версии внутреннего программного обеспечени€ ‘–. ¬ случае успешного выполнени€ метод возвращает true
    function FPPrintLastKsefPacket: boolean; //ћетод выполн€ет печать копии последнего пакета данных чека или Z-отчЄта). ¬ случае успешного выполнени€ метод возвращает true
    function FPPrintKsefPacket(packetID: Cardinal): boolean; //ћетод выполн€ет печать копии указанного пакета данных чека или Z-отчЄта. ¬ случае успешного выполнени€ метод возвращает true.
    function FPMakeDiscount(isPercentType: boolean;
                            isForItem: boolean;
                            value: Integer;
                            textLine: string): boolean; //ћетод выполн€ет операцию скидки на последний товар в чеке или на промежуточную сумму чека. ¬ случае успешного выполнени€ метод возвращает true
    function FPMakeMarkUp(isPercentType: boolean;
                          isForItem: boolean;
                          value: integer;
                          textLine: string): boolean; //ћетод выполн€ет операцию наценки на последний товар в чеке или на промежуточную сумму чека. ¬ случае успешного выполнени€ метод возвращает true
    function FPOnlineSwitch: boolean; //ћетод выполн€ет переключение режима печати чеков онлайн/оффлайн.
                                      //¬ случае успешного выполнени€ метод возвращает true
    function FPCustomerDisplayModeSwitch: boolean; //ћетод выполн€ет переключение режима вывода суммы чека на дисплей покупател€ пользовательский/автономный. ¬ случае успешного выполнени€ метод возвращает true
    function FPChangeBaudRate(baudRateIndex: byte): boolean; //ћетод выполн€ет переключение скорости работы UART в ‘– на указанную скорость. ¬ случае успешного выполнени€ метод возвращает true
    function FPPrintServiceReportByLine(textLine: string): boolean; //ћетод выполн€ет открытие служебного отчЄта, если он не открыт и печатает в нЄм одну строку текста. ¬ случае успешного выполнени€ метод возвращает true
    function FPPrintServiceReportMultiLine(multiLineText: string): boolean; //ћетод выполн€ет открытие служебного отчЄта, если он не открыт и печатает в нЄм многострочный текст. ¬ случае успешного выполнени€ метод возвращает true.
    function FPCloseServiceReport: boolean; //ћетод выполн€ет закрытие служебного отчЄта. ¬ случае успешного выполнени€ метод возвращает true
    function FPDisableLogo(progPassword: Word): boolean; //ћетод отключает печать пользовательского логотипа (логотипа торговой организации) в чеках и отчЄтах. ¬ случае успешного выполнени€ метод возвращает true
    function FPEnableLogo(progPassword: Word): boolean; //ћетод включает печать пользовательского логотипа (логотипа торговой организации) в чеках и отчЄтах, если он был предварительно записан в ‘– обслуживающей организацией. ¬ случае успешного выполнени€ метод возвращает true.
    function FPSetTaxRates(progPassword: Word): boolean; //ћетод выполн€ет установку типа налога, новых ставок налогов и сборов из предварительно установленных значений св€занных с методом свойств. ¬ случае успешного выполнени€ метод возвращает true. —боры устанавливаютс€ только в случае выбора вложенного типа налога, когда налог включЄн в цену
    function FPGetTaxRates: boolean; //ћетод выполн€ет чтение из ‘– типа установленного налога, а также ставок налогов и сборов в св€занные с методом свойства. ¬ случае успешного выполнени€ метод возвращает true.
    function FPProgItem(progPassword: byte; qtyPrecision: byte; isRefundItem: boolean; itemPrice: integer; itemTax: byte; itemName: string; itemCode: Longint): boolean; //ћетод выполн€ет предварительную запись (перед открытием смены) описани€ товара в пам€ть артикулов ‘–. ¬ случае успешного выполнени€ метод возвращает true
    function FPProgItemStr(progPassword: byte; qtyPrecision: byte; isRefundItem: boolean; itemPrice: integer; itemTax: byte; itemName: string; itemCodeStr: string): boolean; //ћетод выполн€ет предварительную запись (перед открытием смены) описани€ товара в пам€ть артикулов ‘–. –екомендуетс€ дл€ использовани€ в случае, если среда разработки не поддерживает тип __int64 (1—:ѕредпри€тие 8.x). ¬ случае успешного выполнени€ метод возвращает true.
    function FPMakeXReport(reportPassword: Word): boolean; //ћетод выполн€ет печать X-отчЄта. ¬ случае успешного выполнени€ метод возвращает true.
    function FPMakeZReport(reportPassword: Word): boolean; //ћетод выполн€ет печать Z-отчЄта с обнулением дневных регистров ‘–. ¬ случае успешного выполнени€ метод возвращает true
    function FPMakeReportOnItems(reportPassword: byte; firstItemCode: Longint; lastItemCode: Longint): boolean; //ћетод выполн€ет печать отчЄта по товарам из указанного диапазона кодов. ≈сли значени€ firstItemCode и lastItemCode не заданы (нулевые), тогда печатаетс€ отчЄт по всем товарам. ¬ случае успешного выполнени€ метод возвращает true.
    function FPMakeReportOnItemsStr(reportPassword: byte; firstItemCodeStr: string; lastItemCodeStr: string): boolean; //ћетод выполн€ет печать отчЄта по товарам из указанного диапазона кодов.
                                                                                                                       //ћетод работает аналогично FPMakeReportOnItems. –екомендуетс€ дл€ использовани€ в случае, если среда разработки
                                                                                                                       //не поддерживает тип __int64 (1—:ѕредпри€тие 8.x). ≈сли значени€ firstItemCodeStr и lastItemCodeStr не заданы (пуста€ строка),
                                                                                                                       //тогда возникнет ошибка. ƒл€ печати отчЄта по всем товарам в параметры firstItemCodeStr
                                                                                                                       //и lastItemCodeStr нужно передать значение У0Ф. ¬ случае успешного выполнени€ метод возвращает true
    function FPMakePeriodicReportOnDate(reportPassword: byte; firstDate: TDateTime; lastDate: TDateTime): boolean; //ћетод выполн€ет печать полного периодического отчЄта из фискальной пам€ти по датам за указанный период. ¬ случае успешного выполнени€ метод возвращает true.
    function FPMakePeriodicReportOnDateStr(reportPassword: byte; firstDateStr: string; lastDateStr: string): boolean; //ћетод выполн€ет печать полного периодического отчЄта из фискальной пам€ти по датам за указанный период.
                                                                                                                      //ћетод работает аналогично FPMakePeriodicReportOnDate.
                                                                                                                      //¬ случае успешного выполнени€ метод возвращает true
    function FPMakePeriodicShortReportOnDate(reportPassword: byte; firstDate: TDateTime; lastDate: TDateTime): boolean; //ћетод выполн€ет печать короткого периодического отчЄта из фискальной пам€ти по датам за указанный период. ¬ случае успешного выполнени€ метод возвращает true.
    function FPMakePeriodicShortReportOnDateStr(reportPassword: byte; firstDateStr: string; lastDateStr: string): boolean; //ћетод выполн€ет печать короткого периодического отчЄта из фискальной пам€ти по
                                                                                                                           //датам за указанный период. –аботает аналогично FPMakePeriodicShortReportOnDate.
                                                                                                                           //¬ случае успешного выполнени€ метод возвращает true
    function FPMakePeriodicReportOnNumber(reportPassword: Word; firstNumber: Word; lastNumber: Word): boolean; //ћетод выполн€ет печать полного периодического отчЄта из фискальной пам€ти по диапазону номеров Z-отчЄтов.
                                                                                                               //¬ случае успешного выполнени€ метод возвращает true
    function FPCutterModeSwitch: boolean; //ћетод выполн€ет выключение/включение обрезчика чеков. ¬ случае успешного выполнени€ метод возвращает true
    function FPPrintBarcodeOnReceipt(serialCode128B: string): boolean; //ћетод выполн€ет регистрацию штрих-кода на чек в формате CODE 128 (тип B) с последующей печатью после закрыти€ чека.
                                                                       //¬ случае успешного выполнени€ метод возвращает true.
    function FPPrintBarcodeOnItem(serialEAN13: string): boolean; //ћетод выполн€ет регистрацию штрих-кода на товар в теле чека в формате EAN13.
                                                                 //¬ случае успешного выполнени€ метод возвращает true.
    function FPGetPaymentFormNames: boolean; //ћетод выполн€ет чтение названий форм оплат из ‘– в св€занные с методом свойства. ¬ случае успешного выполнени€ метод возвращает true
    function FPGetCashDrawerSum: boolean; //ћетод выполн€ет чтение из ‘– в св€занное с методом свойство суммы наличных денежных средств, об€занных быть в денежном €щике. ¬ случае успешного выполнени€ метод возвращает true
    function FPGetDayReportProperties: boolean; //ћетод выполн€ет чтение данных о смене из ‘– и заполн€ет ими соответствующие свойства. ¬ случае успешного выполнени€ метод возвращает true
    function FPGetItemData(itemCode: Longint): boolean; //ћетод выполн€ет чтение данных о товаре из ‘– и заполн€ет ими соответствующие свойства. ¬ случае успешного выполнени€ метод возвращает true.
    function FPGetItemDataStr(itemCodeStr: string): boolean; //ћетод выполн€ет чтение данных о товаре из ‘– и заполн€ет ими соответствующие свойства.
                                                             //ћетод работает аналогично FPGetItemData. –екомендуетс€ дл€ использовани€ в случае, если среда разработки
                                                             //не поддерживает тип __int64 (1—:ѕредпри€тие 8.x).
                                                             //¬ случае успешного выполнени€ метод возвращает true.
    function FPGetDayReportData: boolean; //ћетод выполн€ет чтение из ‘– данных о дневных оборотах смены и заполн€ет ими соответствующие свойства. ¬ случае успешного выполнени€ метод возвращает true.
    function FPGetCurrentReceiptData: boolean; //ћетод выполн€ет чтение из ‘– данных текущего чека и заполн€ет ими соответствующие свойства. ¬ случае успешного выполнени€ метод возвращает true
    function FPGetDayCorrectionsData: boolean; //ћетод выполн€ет чтение из ‘– общих сумм коррекций и аннул€ций чеков за смену и заполн€ет ими соответствующие свойства. ¬ случае успешного выполнени€ метод возвращает true
    function FPGetDaySumOfAddTaxes: boolean; //ћетод выполн€ет чтение из ‘– сумм налогов распределЄнных по налоговым группам в случае, если установлен наложенный тип налога, а также заполн€ет ими соответствующие свойства. ¬ случае успешного выполнени€ метод возвращает true.
    function FPGetCurrentStatus: boolean; //ћетод выполн€ет чтение текущего состо€ни€ ‘–
                                          //и также заполн€ет соответствующие свойства.
                                          //¬ случае успешного выполнени€ метод возвращает true.
    function FPPrintKsefRange(firstPacketID: Cardinal; lastPacketID: Cardinal): boolean; //ћетод выполн€ет печать копий пакетов данных чеков и Z-отчЄтов из заданного диапазона. ¬ случае успешного выполнени€ метод возвращает true.
    function FPPaymentByCard(paymentForm: byte; paymentSum: Word; autoCloseReceipt: boolean; asFiscalReceipt: boolean; cardInfo: string; authCode: String): boolean; //ћетод предназначен дл€ выполнени€ полной или частичной оплаты чека
                                                                                //через платЄжный EFT-терминал с печатью соответствующих идентификаторов карты и кода авторизации платежа.
                                                                                //¬ случае успешного выполнени€ метод возвращает true.
    function FPPrintModemStatus: boolean; //ћетод выполн€ет печать на ленте настроек модема, а также его текущего состо€ни€. ¬ случае успешного выполнени€ метод возвращает true
    function FPGetUserPassword(userID: byte): boolean; //ћетод выполн€ет чтение паролей пользователей (кассиров). ¬ случае успешного выполнени€ метод возвращает true
    function FPPrintBarcodeOnReceiptNew(serialCode128C: string): boolean; //ћетод выполн€ет регистрацию штрих-кода на чек в формате CODE 128 (тип C) с последующей печатью после закрыти€ чека. ¬ случае успешного выполнени€ метод возвращает true.
    function FPPrintBarcodeOnServiceReport(serialCode128B: string): boolean; //ћетод выполн€ет печать штрих-кода в служебном отчЄте (CODE128 тип B). ¬ случае успешного выполнени€ метод возвращает true
    function FPPrintQRCode(serialQR: string): boolean; //ћетод выполн€ет печать QR-кода. ¬ случае успешного выполнени€ метод возвращает true.
    function FPClaimUSBDevice: boolean; //ћетод захватывает канал св€зи с ‘– по USB-интерфейсу через WinUSB драйвер. –абота с ‘– осуществл€етс€ через конечные точки USB endpoints. ¬ случае нахождени€ ‘– в списке USB-устройств, а также успешного подключени€ к нему метод вернЄт true.
    function FPReleaseUSBDevice: boolean; //ћетод закрывает соединение с ‘– по USB-интерфейсу и освобождает USB-устройство

    function ModemInitialize(_COMportStr: byte): integer; //ћетод выполн€ет подключение к встроенному модему.
                                                            //ƒолжен вызыватьс€ после метода FPOpen или FPOpenStr компоненты ЂICS_EP_09ї.
                                                            //¬озвращает 0, если инициализаци€ прошла или код ошибки в соответствии с
                                                            //функцией GetLastError() или GetLastWin32Error()
    function ModemAckuirerConnect: boolean; //ћетод выполн€ет попытку подключени€ встроенного модема к хосту эквайера дл€ передачи данных.
                                            //ѕопытка нового подключени€ будет выполн€тьс€ после окончани€ текущего периода ожидани€ на подключение (период задаЄтс€
                                            //в настройках конфигурации модема). ¬ случае успешного выполнени€ метод возвращает true.
    function ModemAckuirerUnconditionalConnect: boolean; //ћетод выполн€ет попытку подключени€ встроенного модема к хосту эквайера дл€ передачи данных.
                                                         //ѕопытка нового подключени€ будет выполн€тьс€ сразу, не дожида€сь окончани€ текущего периода ожидани€ на подключение.
                                                         //¬ случае успешного выполнени€ метод возвращает true.
    function ModemUpdateStatus: boolean; //ћетод выполн€ет чтение идентификатора модема, настроек и параметров его текущего состо€ни€.
                                         //ƒанные о модеме можно вычитать из соответствующих свойств. ¬ случае успешного выполнени€ метод возвращает true.
    function ModemVerifyPacket(packetID: Cardinal): boolean; //ћетод выполн€ет проверку целостности пакета данных. ¬ случае успешного выполнени€ метод возвращает true.
    function ModemFindPacket(zReport: Integer; receiptNumber: integer; receiptType: byte): boolean; //ћетод выполн€ет поиск пакета по заданным параметрам поиска. ¬ случае успешного выполнени€ метод возвращает true
    function ModemKsefPacket(packetID: Cardinal): boolean; //ћетод выполн€ет сохранение указанного в параметре пакета данных на диск в указанную директорию (св-во prKsefSavePath) в формате XML (см. ѕриложение 2). ¬ случае успешного выполнени€ метод возвращает true
    function ModemReadKsefRange(firstPacketID: Cardinal; lastPacketID: Cardinal): boolean; //ћетод выполн€ет чтение и сохранение указанного диапазона пакетов данных на диск в указанную директорию (св-во prKsefSavePath) в формате XML (см. ѕриложение 2). ¬ случае успешного выполнени€ метод возвращает true
    function ModemReadKsefByZReport(zReport: Integer): boolean; //ћетод выполн€ет сохранение всех пакетов смены, принадлежащей указанному в параметре Z-отчЄту, на диск в указанную директорию (св-во prKsefSavePath) в формате XML (см. ѕриложение 2). ¬ случае успешного выполнени€ метод возвращает true.
    function ModemGetCurrentTask: boolean; //ћетод вычитывает значение текущей задачи модема. ¬ случае успешного выполнени€ метод возвращает true
    function ModemFindPacketByDateTime(findDateTime: TDateTime; findForward: boolean): boolean; //ћетод выполн€ет поиск пакета по указанным дате, времени и направлению поиска. ¬ случае успешного выполнени€ метод возвращает true.
    function ModemFindPacketByDateTimeStr(findDateTimeStr: string; findForward: boolean): boolean; //ћетод выполн€ет поиск пакета по указанным дате, времени и направлению поиска. ћетод работает аналогично ModemFindPacketByDateTime. ¬ случае успешного выполнени€ метод возвращает true.
    function ModemSaveKsefRangeToBin(directory: string; fileName: string; firstPacketID: Cardinal; lastPacketID: Cardinal): boolean; //ћетод выполн€ет выгрузку пакетов данных из указанного диапазона
                                                                                                                                     //в двоичном формате в указанную директорию на диск.
                                                                                                                                     //¬ параметрах функции directory и filename можно передавать
                                                                                                                                     //пустые значени€. ≈сли в параметре directory передаЄтс€ пуста€ строка,
                                                                                                                                     //то путь будет вз€т из свойства prKsefSavePath.
                                                                                                                                     //≈сли там тоже пустое значение, тогда путь дл€ сохранени€ двоичных данных
                                                                                                                                     //пакетов будет сформирован в подкаталоге ЂKSEFї каталога драйвера.
                                                                                                                                     //≈сли в параметре fileName передаЄтс€ пуста€ строка, то драйвер сохранит
                                                                                                                                     //двоичные данные пакетов в виде: ssssssssssЂpїxxxxЂЦїуууу или ssssssssssЂpїxxxx
                                                                                                                                     //(дл€ одного пакета),
                                                                                                                                     //где ssssssssss Ц серийный номер ‘–;
                                                                                                                                     //xxxx Ц номера первого пакета из диапазона;
                                                                                                                                     //yyyy Ц номера последнего пакета из диапазона.
                                                                                                                                     //¬се двоичные данные пакетов сохран€ютс€ в файл с расширением Ђ.ksfї.
                                                                                                                                     //¬ случае успешного выполнени€ метод возвращает true.
    function ModemSaveKsefByZReportTobin(directory: string; fileName: string; zReport: integer): boolean; //ћетод выполн€ет выгрузку всех пакетов данных, принадлежащих к указанному номеру смены (номеру Z-отчЄта) в двоичном
                                                                                                          //формате в указанную директорию на диск. ¬ параметрах функции directory и filename можно передавать пустые значени€.
                                                                                                          //≈сли в параметре directory передаЄтс€ пуста€ строка, то путь будет вз€т из свойства prKsefSavePath. ≈сли там тоже пустое
                                                                                                          //значение, тогда путь дл€ сохранени€ двоичных данных пакетов будет сформирован в подкаталоге ЂKSEFї каталога драйвера.
                                                                                                          //≈сли в параметре fileName передаЄтс€ пуста€ строка, то драйвер сохранит двоичные данные пакетов в виде: ssssssssssЂzїx,
                                                                                                          //где ssssssssss Ц серийный номер ‘–.
                                                                                                          //x Ц номер смены (Z Ц отчЄта).
                                                                                                          //¬се двоичные данные пакетов сохран€ютс€ в файл с раширением Ђ.ksfї.
                                                                                                          //¬ случае успешного выполнени€ метод возвращает true.

    property glPropertiesAutoUpdateMode: boolean read GetPropertiesAutoUpdateMod write SetPropertiesAutoUpdateMod; //true Ц режим скрытого вызова методов при обновлении значений св€занных с методом свойств.
                                                                                                                   //ѕо умолчанию Ц false
    property glUseVirtualPort: boolean read GetUseVirtualPort write SetUseVirtualPort; //»спользуетс€ дл€ корректной работы драйвера-эмул€тора COM-порта при подключении ‘– по интерфейсу USB.
                                                                                       //ѕо умолчанию Ц false.
    property glVirtualPortOpened: boolean read GetVirtualPortOpened; //ћожет использоватьс€ дл€ контрол€ активности соединени€ с ‘– по интерфейсу USB через драйвер виртуального COM- порта.
                                                                     //ѕосле установки параметра glUseVirtualPort в true и подключени€ к ‘– методом FPOpen мен€ет своЄ состо€ние на true. ѕри внезапном обрыве сеанса св€зи или корректном отключении снова переходит в состо€ние false.
                                                                     //ѕо умолчанию Ц false
    property glTapeAnalizer: boolean read GetTapeAnalizer write SetTapeAnalizer; //true Ц анализ датчика толщины рулона ленты.
                                                                                 //ѕо умолчанию Ц false
    property glCodepageOEM: boolean read GetCodepageOEM write SetCodepageOEM; //true Ц строки в OEM кодировке.
                                                                              //ѕо умолчанию Ц false
    property glLangID: byte read GetLangID write SetLangID; //язык текста ошибок:
                                                      //0 Ц английский;
                                                      //1 Ц русский;
                                                      //2 Ц украинский.
                                                      //ѕо умолчанию Ц 1
    property prRepeatCount: byte read GetRepeatCount write SetRepeatCount; // оличество повторов команды при отсутствии ответа или ошибке в ответе от ‘–.
                                                                           //ѕо умолчанию Ц 2.
    property prLogRecording: boolean read GetLogRecording write SetLogRecording; //ѕризнак включени€ функции записи трафика
                                                                                 //коммуникационного порта.
                                                                                 //ѕо умолчанию Ц false.
    property prAnswerWaiting: byte read GetAnswerWaiting write SetAnswerWaiting; //ћножитель таймаута ожидани€ ответа от ‘–.
                                                                                    // ажда€ 1 = таймаут 300 мс задержки.
                                                                                    //ѕо умолчанию Ц 10 (3000 мс).
    property prGetStatusByte: byte read GetStatusByte; //Ѕайт статуса ‘–.
    property prGetResultByte: byte read GetResultByte; // од ошибки ‘– или драйвера
    property prGetReserveByte: byte read GetReserveByte; // од дополнительных флагов состо€ни€ ‘–

    property prGetErrorText: string read GetErrorText; //текстовое описание ошибки.
    property prPrinterError: boolean read  GetPrinterError; //ѕризнак нахождени€ механизма печати в состо€нии ошибки:
                                                            //false Ц нет ошибки;
                                                            //true Ц ошибка.
    property prTapeEnded: boolean read GetTapeEnded; //ѕризнак отсутстви€ ленты в механизме печати:
                                                     //false Ц лента есть;
                                                     //true Ц ленты нет.
    property prTapeNearEnd: boolean read GetTapeNearEnd; //ѕризнак малого остатка ленты в механизме печати:
                                                         //false Ц нет;
                                                         //true Ц да
    property prItemCost: Longint read GetItemCost; //—тоимость товара в коп.
    property prSumTotal: Longint read GetSumTotal; //—умма чека в коп.
    property prSumBalance: Longint read GetSumBalance; //—умма баланса оплат чека в коп. (prSumBalance = 0)
    property prItemCostStr: string read GetItemCostStr; //—тоимость товара в коп.
    property prSumTotalStr: string read GetSumTotalStr; //—умма чека в коп.
    property prSumBalanceStr: string read GetSumBalanceStr; //—умма баланса оплат чека в коп. (prSumBalance = 0)
    property prSumDiscount: Longint read GetSumDiscount; //—умма скидок в коп.
    property prSumDiscountStr: string read GetSumDiscountStr; //—умма скидок в коп.
    property prSumMarkup: Longint read GetSumMarkup; //—умма наценок в коп.
    property prSumMarkupStr: string read GetSumMarkupStr; //—умма наценок в коп
    property prKSEFPacket: Cardinal read GetKSEFPacket; //Ќомер пакета данных
    property prKSEFPacketStr: string read GetKSEFPacketStr; //Ќомер пакета в виде строки.
    property prCurrentDate: TDateTime read GetCurrentDate; //“екуща€ дата ‘–, составл€юща€ времени не учитываетс€.
    property prCurrentDateStr: string read GetCurrentDateStr; //“екуща€ дата ‘– в виде строки с разделител€ми даты
    property prCurrentTime: TDateTime read GetCurrentTime; //“екущее врем€ ‘– , составл€юща€ даты не учитываетс€.
    property prCurrentTimeStr: string read GetCurrentTimeStr; //“екущее врем€ ‘– в виде строки с разделител€ми времени.
    property prModemError: byte read GetModemError; // од ошибки модема
    property prTaxRatesCount: byte read GetTaxRatesCount write SetTaxRatesCount; // оличество используемых налоговых групп.
    property prAddTaxType: boolean read GetAddTaxType write SetAddTaxType; //“ип налога: false Ц вложенный; true Ц наложенный
    property prTaxRate1: integer read GetTaxRate1 write SetTaxRate1; //—тавка группы Ђјї в 0,01 %
    property prTaxRate2: integer read GetTaxRate2 write SetTaxRate2; //—тавка группы ЂЅї в 0,01 %
    property prTaxRate3: integer read GetTaxRate3 write SetTaxRate3; //—тавка группы Ђ¬ї в 0,01 %
    property prTaxRate4: integer read GetTaxRate4 write SetTaxRate4; //—тавка группы Ђ√ї в 0,01 %
    property prTaxRate5: integer read GetTaxRate5 write SetTaxRate5; //—тавка группы Ђƒї в 0,01 %
    property prTaxRate6: integer read GetTaxRate6; //—тавка группы Ђƒї в 0,01 %
    property prUsedAdditionalFee: boolean read GetUsedAdditionalFee write SetUsedAdditionalFee; //‘лаг использовани€ сборов: false Ц не используютс€; true Ц используютс€.
    property prAddFeeRate1: integer read GetAddFeeRate1 write SetAddFeeRate1; //—тавка сбора Ђјї в 0,01 %
    property prAddFeeRate2: integer read GetAddFeeRate2 write SetAddFeeRate2; //—тавка сбора ЂЅї в 0,01 %
    property prAddFeeRate3: integer read GetAddFeeRate3 write SetAddFeeRate3; //—тавка сбора Ђ¬ї в 0,01 %
    property prAddFeeRate4: integer read GetAddFeeRate4 write SetAddFeeRate4; //—тавка сбора Ђ√ї в 0,01 %
    property prAddFeeRate5: integer read GetAddFeeRate5 write SetAddFeeRate5; //—тавка сбора Ђƒї в 0,01 %
    property prAddFeeRate6: integer read GetAddFeeRate6 write SetAddFeeRate6; //—тавка сбора Ђ≈ї в 0,01 %
    property prTaxOnAddFee1: boolean read GetTaxOnAddFee1 write SetTaxOnAddFee1; //Ќалог на сбор группы Ђјї: false Ц не начисл€етс€; true Ц начисл€етс€
    property prTaxOnAddFee2: boolean read GetTaxOnAddFee2 write SetTaxOnAddFee2; //Ќалог на сбор группы ЂЅї: false Ц не начисл€етс€; true Ц начисл€етс€
    property prTaxOnAddFee3: boolean read GetTaxOnAddFee3 write SetTaxOnAddFee3; //Ќалог на сбор группы Ђ¬ї: false Ц не начисл€етс€; true Ц начисл€етс€
    property prTaxOnAddFee4: boolean read GetTaxOnAddFee4 write SetTaxOnAddFee4; //Ќалог на сбор группы Ђ√ї: false Ц не начисл€етс€; true Ц начисл€етс€
    property prTaxOnAddFee5: boolean read GetTaxOnAddFee5 write SetTaxOnAddFee5; //Ќалог на сбор группы Ђƒї: false Ц не начисл€етс€; true Ц начисл€етс€
    property prTaxOnAddFee6: boolean read GetTaxOnAddFee6 write SetTaxOnAddFee6; //Ќалог на сбор группы Ђ≈ї: false Ц не начисл€етс€; true Ц начисл€етс€
    property prAddFeeOnRetailPrice1: boolean read GetAddFeeOnRetailPrice1 write SetAddFeeOnRetailPrice1; //—бор на розничную цену с Ќƒ— дл€ группы Ђјї: false Ц не начисл€етс€; true Ц начисл€етс€.
    property prAddFeeOnRetailPrice2: boolean read GetAddFeeOnRetailPrice2 write SetAddFeeOnRetailPrice2; //—бор на розничную цену с Ќƒ— дл€ группы Ђјї: false Ц не начисл€етс€; true Ц начисл€етс€.
    property prAddFeeOnRetailPrice3: boolean read GetAddFeeOnRetailPrice3 write SetAddFeeOnRetailPrice3; //—бор на розничную цену с Ќƒ— дл€ группы Ђјї: false Ц не начисл€етс€; true Ц начисл€етс€.
    property prAddFeeOnRetailPrice4: boolean read GetAddFeeOnRetailPrice4 write SetAddFeeOnRetailPrice4; //—бор на розничную цену с Ќƒ— дл€ группы Ђјї: false Ц не начисл€етс€; true Ц начисл€етс€.
    property prAddFeeOnRetailPrice5: boolean read GetAddFeeOnRetailPrice5 write SetAddFeeOnRetailPrice5; //—бор на розничную цену с Ќƒ— дл€ группы Ђјї: false Ц не начисл€етс€; true Ц начисл€етс€.
    property prAddFeeOnRetailPrice6: boolean read GetAddFeeOnRetailPrice6 write SetAddFeeOnRetailPrice6; //—бор на розничную цену с Ќƒ— дл€ группы Ђјї: false Ц не начисл€етс€; true Ц начисл€етс€.
    property prTaxRatesDate: TDateTime read GetTaxRatesDate; //ƒата программировани€ налоговых групп
    property prTaxRatesDateStr: string read GetTaxRatesDateStr; //ƒата программировани€ налоговых групп
    property prNamePaymentForm1: string read GetNamePaymentForm1; //Ќазвание формы оплаты є1
    property prNamePaymentForm2: string read GetNamePaymentForm2; //Ќазвание формы оплаты є2
    property prNamePaymentForm3: string read GetNamePaymentForm3; //Ќазвание формы оплаты є3
    property prNamePaymentForm4: string read GetNamePaymentForm4; //Ќазвание формы оплаты є4
    property prNamePaymentForm5: string read GetNamePaymentForm5; //Ќазвание формы оплаты є5
    property prNamePaymentForm6: string read GetNamePaymentForm6; //Ќазвание формы оплаты є6
    property prNamePaymentForm7: string read GetNamePaymentForm7; //Ќазвание формы оплаты є7
    property prNamePaymentForm8: string read GetNamePaymentForm8; //Ќазвание формы оплаты є8
    property prNamePaymentForm9: string read GetNamePaymentForm9; //Ќазвание формы оплаты є9
    property prNamePaymentForm10: string read GetNamePaymentForm10; //Ќазвание формы оплаты є10
    property prCashDrawerSum: Longint read GetCashDrawerSum; //—умма наличных денежных средств, в денежном €щике, коп.
    property prCashDrawerSumStr: string read GetCashDrawerSumStr; //—умма наличных денежных средств, в денежном €щике в текстовом представлении, коп.
    property prCurrentZReport: Integer read GetCurrentZReport; //Ќомер текущей смены
    property prCurrentZReportStr: string read GetCurrentZReportStr; //Ќомер текущей смены в текстовом представлении.
    property prDayEndDate: TDateTime read GetDayEndDate; //ƒата конца смены, составл€юща€ времени игнорируетс€
    property prDayEndDateStr: string read GetDayEndDateStr; //ƒата конца смены, представленна€ в виде строки с разделител€ми даты
    property prDayEndTime: TDateTime read GetDayEndTime; //¬рем€ конца смены, составл€юща€ даты игнорируетс€.
    property prDayEndTimeStr: string read GetDayEndTimeStr; //¬рем€ конца смены, представленное в виде строки с разделител€ми времени
    property prItemsCount: Integer read GetItemsCount; // оличество описаний товаров в пам€ти ‘–
    property prItemsCountStr: string read GetItemsCountStr; // оличество описаний товаров в пам€ти ‘– в текстовом представлении.
    property prLastZReportDate: TDateTime read GetLastZReportDate; //ƒата последнего Z-отчЄта, составл€юща€ времени игнорируетс€.
    property prLastZReportDateStr: string read GetLastZReportDateStr; //ƒата последнего Z-отчЄта, представленна€ в виде строки с разделител€ми даты
    property prItemName: string read GetItemName; //Ќазвание товара
    property prItemPrice: integer read GetItemPrice; //÷ена товара в коп.
    property prItemTax: byte read GetItemTax; //»ндекс налоговой группы 1-ј Е 6-≈)
    property prItemSaleQuantity: integer read GetItemSaleQuantity; // оличество проданного товара в минимальной единице измерени€
    property prItemSaleQtyPrecision: byte read GetItemSaleQtyPrecision; //—тепень делител€ количества с основанием 10 дл€ учЄтной единицы измерени€
    property prItemSaleSum: Longint read GetItemSaleSum; //—умма продаж в коп
    property prItemSaleSumStr: string read GetItemSaleSumStr; //—умма продаж, в текстовом представлении, коп.
    property prItemRefundQuantity: integer read GetItemRefundQuantity; // оличество выплаченного товара в минимальной единице измерени€
    property prItemRefundQtyPrecision: byte read GetItemRefundQtyPrecision; //—тепень делител€ количества с основанием 10 дл€ учЄтной единицы измерени€
    property prItemRefundSum: Longint read GetItemRefundSum; //—умма выплат в коп.
    property prItemRefundSumStr: string read GetItemRefundSumStr; //—умма выплат в текстовом представлении, коп
    property prDaySaleReceiptsCount: integer read GetDaySaleReceiptsCount; // оличество чеков продаж за смену.
    property prDaySaleReceiptsCountStr: string read GetDaySaleReceiptsCountStr; // оличество чеков продаж за смену в текстовом представлении.
    property prDayRefundReceiptsCount: integer read GetDayRefundReceiptsCount; // оличество чеков выплат за смену.
    property prDayRefundReceiptsCountStr: string read GetDayRefundReceiptsCountStr; // оличество чеков выплат за смену в текстовом представлении
    property prDaySaleSumOnTax1: Cardinal read GetDaySaleSumOnTax1; //—умма оборота продаж в коп. по налоговой группе Ђјї
    property prDaySaleSumOnTax1Str: string read GetDaySaleSumOnTax1Str; //—умма оборота продаж в коп. по налоговой группе Ђјї в текстовом представлении.
    property prDaySaleSumOnTax2: Cardinal read GetDaySaleSumOnTax2; //—умма оборота продаж в коп. по налоговой группе ЂЅї
    property prDaySaleSumOnTax2Str: string read GetDaySaleSumOnTax2Str; //—умма оборота продаж в коп. по налоговой группе ЂЅї в текстовом представлении.
    property prDaySaleSumOnTax3: Cardinal read GetDaySaleSumOnTax3; //—умма оборота продаж в коп. по налоговой группе Ђ¬ї
    property prDaySaleSumOnTax3Str: string read GetDaySaleSumOnTax3Str; //—умма оборота продаж в коп. по налоговой группе Ђ¬ї в текстовом представлении.
    property prDaySaleSumOnTax4: Cardinal read GetDaySaleSumOnTax4; //—умма оборота продаж в коп. по налоговой группе Ђ√ї
    property prDaySaleSumOnTax4Str: string read GetDaySaleSumOnTax4Str; //—умма оборота продаж в коп. по налоговой группе Ђ√ї в текстовом представлении.
    property prDaySaleSumOnTax5: Cardinal read GetDaySaleSumOnTax5; //—умма оборота продаж в коп. по налоговой группе Ђƒї
    property prDaySaleSumOnTax5Str: string read GetDaySaleSumOnTax5Str; //—умма оборота продаж в коп. по налоговой группе Ђƒї в текстовом представлении.
    property prDaySaleSumOnTax6: Cardinal read GetDaySaleSumOnTax6; //—умма оборота продаж в коп. по налоговой группе Ђ≈ї
    property prDaySaleSumOnTax6Str: string read GetDaySaleSumOnTax6Str; //—умма оборота продаж в коп. по налоговой группе Ђ≈ї в текстовом представлении.
    property prDayRefundSumOnTax1: Cardinal read GetDayRefundSumOnTax1; //—умма оборота выплат в коп. по налоговой группе Ђјї.
    property prDayRefundSumOnTax1Str: string read GetDayRefundSumOnTax1Str; //—умма оборота выплат в коп. по налоговой группе Ђјї в текстовом представлении.
    property prDayRefundSumOnTax2: Cardinal read GetDayRefundSumOnTax2; //—умма оборота выплат в коп. по налоговой группе ЂЅї.
    property prDayRefundSumOnTax2Str: string read GetDayRefundSumOnTax2Str; //—умма оборота выплат в коп. по налоговой группе ЂЅї в текстовом представлении.
    property prDayRefundSumOnTax3: Cardinal read GetDayRefundSumOnTax3; //—умма оборота выплат в коп. по налоговой группе Ђ¬ї.
    property prDayRefundSumOnTax3Str: string read GetDayRefundSumOnTax3Str; //—умма оборота выплат в коп. по налоговой группе Ђ¬ї в текстовом представлении.
    property prDayRefundSumOnTax4: Cardinal read GetDayRefundSumOnTax4; //—умма оборота выплат в коп. по налоговой группе Ђ√ї.
    property prDayRefundSumOnTax4Str: string read GetDayRefundSumOnTax4Str; //—умма оборота выплат в коп. по налоговой группе Ђ√ї в текстовом представлении.
    property prDayRefundSumOnTax5: Cardinal read GetDayRefundSumOnTax5; //—умма оборота выплат в коп. по налоговой группе Ђƒї.
    property prDayRefundSumOnTax5Str: string read GetDayRefundSumOnTax5Str; //—умма оборота выплат в коп. по налоговой группе Ђƒї в текстовом представлении.
    property prDayRefundSumOnTax6: Cardinal read GetDayRefundSumOnTax6; //—умма оборота выплат в коп. по налоговой группе Ђ≈ї.
    property prDayRefundSumOnTax6Str: string read GetDayRefundSumOnTax6Str; //—умма оборота выплат в коп. по налоговой группе Ђ≈ї в текстовом представлении.
    property prDaySaleSumOnPayForm1: Cardinal read GetDaySaleSumOnPayForm1; //—умма оборота продаж в коп. по форме Ђ ј–“ќ„ јї.
    property prDaySaleSumOnPayForm1Str: string read GetDaySaleSumOnPayForm1Str; //—умма оборота продаж в коп. по форме Ђ ј–“ќ„ јї в текстовом представлении.
    property prDaySaleSumOnPayForm2: Cardinal read GetDaySaleSumOnPayForm2; //—умма оборота продаж в коп. по форме Ђ –≈ƒ»“ї.
    property prDaySaleSumOnPayForm2Str: string read GetDaySaleSumOnPayForm2Str; //—умма оборота продаж в коп. по форме Ђ –≈ƒ»“ї в текстовом представлении.
    property prDaySaleSumOnPayForm3: Cardinal read GetDaySaleSumOnPayForm3; //—умма оборота продаж в коп. по форме Ђ„≈ ї.
    property prDaySaleSumOnPayForm3Str: string read GetDaySaleSumOnPayForm3Str; //—умма оборота продаж в коп. по форме Ђ„≈ ї в текстовом представлении.
    property prDaySaleSumOnPayForm4: Cardinal read GetDaySaleSumOnPayForm4; //—умма оборота продаж в коп. по форме ЂЌјЋ»„Ќџ≈ї.
    property prDaySaleSumOnPayForm4Str: string read GetDaySaleSumOnPayForm4Str; //—умма оборота продаж в коп. по форме ЂЌјЋ»„Ќџ≈ї в текстовом представлении.
    property prDaySaleSumOnPayForm5: Cardinal read GetDaySaleSumOnPayForm5; //—умма оборота продаж в коп. по форме Ђ—≈–“»‘» ј“ї.
    property prDaySaleSumOnPayForm5Str: string read GetDaySaleSumOnPayForm5Str; //—умма оборота продаж в коп. по форме Ђ—≈–“»‘» ј“ї в текстовом представлении.
    property prDaySaleSumOnPayForm6: Cardinal read GetDaySaleSumOnPayForm6; //—умма оборота продаж в коп. по форме Ђ¬ј”„≈–ї.
    property prDaySaleSumOnPayForm6Str: string read GetDaySaleSumOnPayForm6Str; //—умма оборота продаж в коп. по форме Ђ¬ј”„≈–ї в текстовом представлении.
    property prDaySaleSumOnPayForm7: Cardinal read GetDaySaleSumOnPayForm7; //—умма оборота продаж в коп. по форме ЂЁЋ≈ “–ќЌЌџ≈ ƒ≈Ќ№√»ї.
    property prDaySaleSumOnPayForm7Str: string read GetDaySaleSumOnPayForm7Str; //—умма оборота продаж в коп. по форме ЂЁЋ≈ “–ќЌЌџ≈ ƒ≈Ќ№√»ї в текстовом представлении.
    property prDaySaleSumOnPayForm8: Cardinal read GetDaySaleSumOnPayForm8; //—умма оборота продаж в коп. по форме Ђ—“–ј’ќ¬јя ¬џѕЋј“јї.
    property prDaySaleSumOnPayForm8Str: string read GetDaySaleSumOnPayForm8Str; //—умма оборота продаж в коп. по форме Ђ—“–ј’ќ¬јя ¬џѕЋј“јї в текстовом представлении.
    property prDaySaleSumOnPayForm9: Cardinal read GetDaySaleSumOnPayForm9; //—умма оборота продаж в коп. по форме Ђѕ–≈ƒќѕЋј“јї.
    property prDaySaleSumOnPayForm9Str: string read GetDaySaleSumOnPayForm9Str; //—умма оборота продаж в коп. по форме Ђѕ–≈ƒќѕЋј“јї в текстовом представлении
    property prDaySaleSumOnPayForm10: Cardinal read GetDaySaleSumOnPayForm10; //—умма оборота продаж в коп. по форме ЂќѕЋј“јї.
    property prDaySaleSumOnPayForm10Str: string read GetDaySaleSumOnPayForm10Str; //—умма оборота продаж в коп. по форме ЂќѕЋј“јї в текстовом представлении.
    property prDayRefundSumOnPayForm1: Cardinal read GetDayRefundSumOnPayForm1; //—умма оборота выплат в коп. по форме Ђ ј–“ќ„ јї.
    property prDayRefundSumOnPayForm2: Cardinal read GetDayRefundSumOnPayForm2; //—умма оборота выплат в коп. по форме Ђ –≈ƒ»“ї.
    property prDayRefundSumOnPayForm3: Cardinal read GetDayRefundSumOnPayForm3; //—умма оборота выплат в коп. по форме Ђ„≈ ї.
    property prDayRefundSumOnPayForm4: Cardinal read GetDayRefundSumOnPayForm4; //—умма оборота выплат в коп. по форме ЂЌјЋ»„Ќџ≈ї.
    property prDayRefundSumOnPayForm5: Cardinal read GetDayRefundSumOnPayForm5; //—умма оборота выплат в коп. по форме Ђ—≈–“»‘» ј“ї.
    property prDayRefundSumOnPayForm6: Cardinal read GetDayRefundSumOnPayForm6; //—умма оборота выплат в коп. по форме Ђ¬ј”„≈–ї.
    property prDayRefundSumOnPayForm7: Cardinal read GetDayRefundSumOnPayForm7; //—умма оборота выплат в коп. по форме ЂЁЋ≈ “–ќЌЌџ≈ ƒ≈Ќ№√»ї.
    property prDayRefundSumOnPayForm8: Cardinal read GetDayRefundSumOnPayForm8; //—умма оборота выплат в коп. по форме Ђ—“–ј’ќ¬јя ¬џѕЋј“јї.
    property prDayRefundSumOnPayForm9: Cardinal read GetDayRefundSumOnPayForm9; //—умма оборота выплат в коп. по форме Ђѕ–≈ƒќѕЋј“јї.
    property prDayRefundSumOnPayForm10: Cardinal read GetDayRefundSumOnPayForm10; //—умма оборота выплат в коп. по форме ЂќѕЋј“јї.
    property prDayRefundSumOnPayForm1Str: string read GetDayRefundSumOnPayForm1Str; //—умма оборота выплат в коп. по форме Ђ ј–“ќ„ јї в текстовом представлении.
    property prDayRefundSumOnPayForm2Str: string read GetDayRefundSumOnPayForm2Str; //—умма оборота выплат в коп. по форме Ђ –≈ƒ»“ї в текстовом представлении.
    property prDayRefundSumOnPayForm3Str: string read GetDayRefundSumOnPayForm3Str; //—умма оборота выплат в коп. по форме Ђ„≈ ї в текстовом представлении.
    property prDayRefundSumOnPayForm4Str: string read GetDayRefundSumOnPayForm4Str; //—умма оборота выплат в коп. по форме ЂЌјЋ»„Ќџ≈ї в текстовом представлении.
    property prDayRefundSumOnPayForm5Str: string read GetDayRefundSumOnPayForm5Str; //—умма оборота выплат в коп. по форме Ђ—≈–“»‘» ј“ї в текстовом представлении
    property prDayRefundSumOnPayForm6Str: string read GetDayRefundSumOnPayForm6Str; //—умма оборота выплат в коп. по форме Ђ¬ј”„≈–ї в текстовом представлении.
    property prDayRefundSumOnPayForm7Str: string read GetDayRefundSumOnPayForm7Str; //—умма оборота выплат в коп. по форме ЂЁЋ≈ “–ќЌЌџ≈ ƒ≈Ќ№√»ї в текстовом представлении.
    property prDayRefundSumOnPayForm8Str: string read GetDayRefundSumOnPayForm8Str; //—умма оборота выплат в коп. по форме Ђ—“–ј’ќ¬јя ¬џѕЋј“јї в текстовом представлении.
    property prDayRefundSumOnPayForm9Str: string read GetDayRefundSumOnPayForm9Str; //—умма оборота выплат в коп. по форме Ђѕ–≈ƒќѕЋј“јї в текстовом представлении.
    property prDayRefundSumOnPayForm10Str: string read GetDayRefundSumOnPayForm10Str; //—умма оборота выплат в коп. по форме ЂќѕЋј“јї в текстовом представлении.
    property prDayDiscountSumOnSales: Cardinal read GetDayDiscountSumOnSales; //—умма скидок в коп. с продаж.
    property prDayDiscountSumOnSalesStr: string read GetDayDiscountSumOnSalesStr; //—умма скидок в коп. с продаж в текстовом представлении
    property prDayDiscountSumOnRefunds: Cardinal read GetDayDiscountSumOnRefunds; //—умма скидок в коп. с выплат.
    property prDayDiscountSumOnRefundsStr: string read GetDayDiscountSumOnRefundsStr; //—умма скидок в коп. с выплат в текстовом представлении
    property prDayMarkupSumOnSales: Cardinal read GetDayMarkupSumOnSales; //—умма наценок в коп. с продаж.
    property prDayMarkupSumOnSalesStr: string read GetDayMarkupSumOnSalesStr; //—умма наценок в коп. с продаж в текстовом представлении.
    property prDayMarkupSumOnRefunds: Cardinal read GetDayMarkupSumOnRefunds; //—умма наценок в коп. с выплат.
    property prDayMarkupSumOnRefundsStr: string read GetDayMarkupSumOnRefundsStr; //—умма наценок в коп. с выплат в текстовом представлении.
    property prDayCashInSum: Cardinal read GetDayCashInSum; //—умма служебных внесений в коп.
    property prDayCashInSumStr: string read GetDayCashInSumStr; //—умма служебных внесений в коп. в текстовом представлении.
    property prDayCashOutSum: Cardinal read GetDayCashOutSum; //—умма служебных изъ€тий в коп.
    property prDayCashOutSumStr: string read GetDayCashOutSumStr; //—умма служебных изъ€тий в коп. в текстовом представлении.
    property prCurReceiptTax1Sum: Cardinal read GetCurReceiptTax1Sum; //—умма чека в коп. по налоговой группе Ђјї.
    property prCurReceiptTax2Sum: Cardinal read GetCurReceiptTax2Sum; //—умма чека в коп. по налоговой группе ЂЅї.
    property prCurReceiptTax3Sum: Cardinal read GetCurReceiptTax3Sum; //—умма чека в коп. по налоговой группе Ђ¬ї.
    property prCurReceiptTax4Sum: Cardinal read GetCurReceiptTax4Sum; //—умма чека в коп. по налоговой группе Ђ√ї.
    property prCurReceiptTax5Sum: Cardinal read GetCurReceiptTax5Sum; //—умма чека в коп. по налоговой группе Ђƒї.
    property prCurReceiptTax6Sum: Cardinal read GetCurReceiptTax6Sum; //—умма чека в коп. по налоговой группе Ђ≈ї.
    property prCurReceiptTax1SumStr: string read GetCurReceiptTax1SumStr; //—умма чека в коп. по налоговой группе Ђјї в текстовом представлении
    property prCurReceiptTax2SumStr: string read GetCurReceiptTax2SumStr; //—умма чека в коп. по налоговой группе ЂЅї в текстовом представлении
    property prCurReceiptTax3SumStr: string read GetCurReceiptTax3SumStr; //—умма чека в коп. по налоговой группе Ђ¬ї в текстовом представлении
    property prCurReceiptTax4SumStr: string read GetCurReceiptTax4SumStr; //—умма чека в коп. по налоговой группе Ђ√ї в текстовом представлении
    property prCurReceiptTax5SumStr: string read GetCurReceiptTax5SumStr; //—умма чека в коп. по налоговой группе Ђƒї в текстовом представлении
    property prCurReceiptTax6SumStr: string read GetCurReceiptTax6SumStr; //—умма чека в коп. по налоговой группе Ђ≈ї в текстовом представлении
    property prCurReceiptPayForm1Sum: Cardinal read GetCurReceiptPayForm1Sum; //—умма чека в коп. по форме оплаты Ђ ј–“ќ„ јї.
    property prCurReceiptPayForm2Sum: Cardinal read GetCurReceiptPayForm2Sum; //—умма чека в коп. по форме оплаты Ђ –≈ƒ»“ї.
    property prCurReceiptPayForm3Sum: Cardinal read GetCurReceiptPayForm3Sum; //—умма чека в коп. по форме оплаты Ђ„≈ ї.
    property prCurReceiptPayForm4Sum: Cardinal read GetCurReceiptPayForm4Sum; //—умма чека в коп. по форме оплаты ЂЌјЋ»„Ќџ≈ї.
    property prCurReceiptPayForm5Sum: Cardinal read GetCurReceiptPayForm5Sum; //—умма чека в коп. по форме оплаты Ђ—≈–“»‘» ј“ї.
    property prCurReceiptPayForm6Sum: Cardinal read GetCurReceiptPayForm6Sum; //—умма чека в коп. по форме оплаты Ђ¬ј”„≈–ї.
    property prCurReceiptPayForm7Sum: Cardinal read GetCurReceiptPayForm7Sum; //—умма чека в коп. по форме оплаты ЂЁЋ≈ “–ќЌЌџ≈ ƒ≈Ќ№√»ї.
    property prCurReceiptPayForm8Sum: Cardinal read GetCurReceiptPayForm8Sum; //—умма чека в коп. по форме оплаты Ђ—“–ј’ќ¬јя ¬џѕЋј“јї.
    property prCurReceiptPayForm9Sum: Cardinal read GetCurReceiptPayForm9Sum; //—умма чека в коп. по форме оплаты Ђѕ–≈ƒќѕЋј“јї.
    property prCurReceiptPayForm10Sum: Cardinal read GetCurReceiptPayForm10Sum; //—умма чека в коп. по форме оплаты ЂќѕЋј“јї.
    property prCurReceiptPayForm1SumStr: string read GetCurReceiptPayForm1SumStr; //—умма чека в коп. по форме оплаты Ђ ј–“ќ„ јї в текстовом представлении.
    property prCurReceiptPayForm2SumStr: string read GetCurReceiptPayForm2SumStr; //—умма чека в коп. по форме оплаты Ђ –≈ƒ»“ї в текстовом представлении.
    property prCurReceiptPayForm3SumStr: string read GetCurReceiptPayForm3SumStr; //—умма чека в коп. по форме оплаты Ђ„≈ ї в текстовом представлении.
    property prCurReceiptPayForm4SumStr: string read GetCurReceiptPayForm4SumStr; //—умма чека в коп. по форме оплаты ЂЌјЋ»„Ќџ≈ї в текстовом представлении.
    property prCurReceiptPayForm5SumStr: string read GetCurReceiptPayForm5SumStr; //—умма чека в коп. по форме оплаты Ђ—≈–“»‘» ј“ї в текстовом представлении
    property prCurReceiptPayForm6SumStr: string read GetCurReceiptPayForm6SumStr; //—умма чека в коп. по форме оплаты Ђ¬ј”„≈–ї в текстовом представлении.
    property prCurReceiptPayForm7SumStr: string read GetCurReceiptPayForm7SumStr; //—умма чека в коп. по форме оплаты ЂЁЋ≈ “–ќЌЌџ≈ ƒ≈Ќ№√»ї в текстовом представлении.
    property prCurReceiptPayForm8SumStr: string read GetCurReceiptPayForm8SumStr; //—умма чека в коп. по форме оплаты Ђ—“–ј’ќ¬јя ¬џѕЋј“јї в текстовом представлении.
    property prCurReceiptPayForm9SumStr: string read GetCurReceiptPayForm9SumStr; //—умма чека в коп. по форме оплаты Ђѕ–≈ƒќѕЋј“јї в текстовом представлении.
    property prCurReceiptPayForm10SumStr: string read GetCurReceiptPayForm10SumStr; //—умма чека в коп. по форме оплаты ЂќѕЋј“јї в текстовом представлении.
    property prDayAnnuledSaleReceiptsCount: Integer read GetDayAnnuledSaleReceiptsCount; // оличество аннулированных чеков продаж.
    property prDayAnnuledSaleReceiptsCountStr: string read GetDayAnnuledSaleReceiptsCountStr; // оличество аннулированных чеков продаж в текстовом представлении.
    property prDayAnnuledSaleReceiptsSum: Cardinal read GetDayAnnuledSaleReceiptsSum; //ќбща€ сумма аннулированных чеков продаж, коп
    property prDayAnnuledSaleReceiptsSumStr: string read GetDayAnnuledSaleReceiptsSumStr; //ќбща€ сумма аннулированных чеков продаж в текстовом представлении, коп
    property prDayAnnuledRefundReceiptsCount: integer read GetDayAnnuledRefundReceiptsCount; // оличество аннулированных чеков выплат.
    property prDayAnnuledRefundReceiptsCountStr: string read GetDayAnnuledRefundReceiptsCountStr; // оличество аннулированных чеков выплат в текстовом представлении.
    property prDayAnnuledRefundReceiptsSum: Cardinal read GetDayAnnuledRefundReceiptsSum; //ќбща€ сумма аннулированных чеков выплат, коп.
    property prDayAnnuledRefundReceiptsSumStr: string read GetDayAnnuledRefundReceiptsSumStr; //ќбща€ сумма аннулированных чеков выплат в текстовом представлении, коп.
    property prDaySaleCancelingsCount: Integer read GetDaySaleCancelingsCount; // оличество отмен в чеках продаж.
    property prDaySaleCancelingsCountStr: string read GetDaySaleCancelingsCountStr; // оличество отмен в чеках продаж в текстовом представлении.
    property prDaySaleCancelingsSum: Cardinal read GetDaySaleCancelingsSum; //ќбща€ сумма отмен в чеках продаж, коп.
    property prDaySaleCancelingsSumStr: String read GetDaySaleCancelingsSumStr; //ќбща€ сумма отмен в чеках продаж в текстовом представлении, коп.
    property prDayRefundCancelingsCount: Integer read GetDayRefundCancelingsCount; // оличество отмен в чеках выплат.
    property prDayRefundCancelingsCountStr: string read GetDayRefundCancelingsCountStr; // оличество отмен в чеках выплат в текстовом представлении.
    property prDayRefundCancelingsSum: Cardinal read GetDayRefundCancelingsSum; //ќбща€ сумма отмен в чеках выплат, коп
    property prDayRefundCancelingsSumStr: string read GetDayRefundCancelingsSumStr; //ќбща€ сумма отмен в чеках выплат в текстовом представлении, коп
    property prDaySumAddTaxOfSale1: Cardinal read GetDaySumAddTaxOfSale1; //—умма налога с продаж по группе Ђјї, коп.
    property prDaySumAddTaxOfSale2: Cardinal read GetDaySumAddTaxOfSale2; //—умма налога с продаж по группе ЂЅї, коп.
    property prDaySumAddTaxOfSale3: Cardinal read GetDaySumAddTaxOfSale3; //—умма налога с продаж по группе Ђ¬ї, коп.
    property prDaySumAddTaxOfSale4: Cardinal read GetDaySumAddTaxOfSale4; //—умма налога с продаж по группе Ђ√ї, коп.
    property prDaySumAddTaxOfSale5: Cardinal read GetDaySumAddTaxOfSale5; //—умма налога с продаж по группе Ђƒї, коп.
    property prDaySumAddTaxOfSale6: Cardinal read GetDaySumAddTaxOfSale6; //—умма налога с продаж по группе Ђ≈ї, коп.
    property prDaySumAddTaxOfSale1Str: string read GetDaySumAddTaxOfSale1Str; //—умма налога с продаж по группе Ђјї в текстовом представлении, коп.
    property prDaySumAddTaxOfSale2Str: string read GetDaySumAddTaxOfSale2Str; //—умма налога с продаж по группе ЂЅї в текстовом представлении, коп.
    property prDaySumAddTaxOfSale3Str: string read GetDaySumAddTaxOfSale3Str; //—умма налога с продаж по группе Ђ¬ї в текстовом представлении, коп.
    property prDaySumAddTaxOfSale4Str: string read GetDaySumAddTaxOfSale4Str; //—умма налога с продаж по группе Ђ√ї в текстовом представлении, коп.
    property prDaySumAddTaxOfSale5Str: string read GetDaySumAddTaxOfSale5Str; //—умма налога с продаж по группе Ђƒї в текстовом представлении, коп.
    property prDaySumAddTaxOfSale6Str: string read GetDaySumAddTaxOfSale6Str; //—умма налога с продаж по группе Ђ≈ї в текстовом представлении, коп.
    property prDaySumAddTaxOfRefund1: Cardinal read GetDaySumAddTaxOfRefund1; //—умма налога с выплат по группе Ђјї, коп.
    property prDaySumAddTaxOfRefund2: Cardinal read GetDaySumAddTaxOfRefund2; //—умма налога с выплат по группе ЂЅї, коп.
    property prDaySumAddTaxOfRefund3: Cardinal read GetDaySumAddTaxOfRefund3; //—умма налога с выплат по группе Ђ¬ї, коп.
    property prDaySumAddTaxOfRefund4: Cardinal read GetDaySumAddTaxOfRefund4; //—умма налога с выплат по группе Ђ√ї, коп.
    property prDaySumAddTaxOfRefund5: Cardinal read GetDaySumAddTaxOfRefund5; //—умма налога с выплат по группе Ђƒї, коп.
    property prDaySumAddTaxOfRefund6: Cardinal read GetDaySumAddTaxOfRefund6; //—умма налога с выплат по группе Ђ≈ї, коп.
    property prDaySumAddTaxOfRefund1Str: string read GetDaySumAddTaxOfRefund1Str; //—умма налога с выплат по группе Ђјї в текстовом представлении, коп.
    property prDaySumAddTaxOfRefund2Str: string read GetDaySumAddTaxOfRefund2Str; //—умма налога с выплат по группе ЂЅї в текстовом представлении, коп.
    property prDaySumAddTaxOfRefund3Str: string read GetDaySumAddTaxOfRefund3Str; //—умма налога с выплат по группе Ђ¬ї в текстовом представлении, коп.
    property prDaySumAddTaxOfRefund4Str: string read GetDaySumAddTaxOfRefund4Str; //—умма налога с выплат по группе Ђ√ї в текстовом представлении, коп.
    property prDaySumAddTaxOfRefund5Str: string read GetDaySumAddTaxOfRefund5Str; //—умма налога с выплат по группе Ђƒї в текстовом представлении, коп.
    property prDaySumAddTaxOfRefund6Str: string read GetDaySumAddTaxOfRefund6Str; //—умма налога с выплат по группе Ђ≈ї в текстовом представлении, коп.
    property prSerialNumber: string read GetSerialNumber; //—трока серийного номера ‘–.
    property prFiscalNumber: string read GetFiscalNumber; //—трока присвоенного фискального номера ‘–.
    property prTaxNumber: string read GetTaxNumber; //—трока налогового или идентификационного номера плательщика налогов.
    property prDateFiscalization: TDateTime read GetDateFiscalization; //ƒата регистрации ‘–, составл€юща€ времени не учитываетс€
    property prDateFiscalizationStr: string read GetDateFiscalizationStr; //ƒата регистрации ‘–, в текстовом представлении с разделител€ми даты.
    property prTimeFiscalization: TDateTime read GetTimeFiscalization; //¬рем€ регистрации ‘–, составл€юща€ даты не учитываетс€.
    property prTimeFiscalizationStr: string read GetTimeFiscalizationStr; //¬рем€ регистрации ‘–, в текстовом представлении с разделител€ми времени.
    property prHardwareVersion: string read GetHardwareVersion; //»дентификатор версии внутреннего программного обеспечени€ ‘–.
    property prHeadLine1: string read GetHeadLine1; //“екст 1-й строки заголовка
    property prHeadLine2: string read GetHeadLine2; //“екст 1-й строки заголовка
    property prHeadLine3: string read GetHeadLine3; //“екст 1-й строки заголовка
    property stUseAdditionalFee: boolean read GetUseAdditionalFee; //ѕризнак использовани€ дополнительных сборов: false - не используютс€; true - используютс€
    property stUseAdditionalTax: boolean read GetUseAdditionalTax; //“ипа налогообложени€: false - вложенный; true - наложенный.
    property stUseCutter: boolean read GetUseCutter; //ѕризнак состо€ни€ обрезчика: false - выключен; true - включен
    property stUseFontB: boolean read GetUseFontB; //ѕризнак шрифта: false - шрифт Ђјї (12x24); true - шрифт ЂЅї (9x24).
    property stUseTradeLogo: boolean read GetUseTradeLogo; //ѕризнак печати логотипа: false - не печатаетс€; true - печатаетс€.
    property stCashDrawerIsOpened: boolean read GetCashDrawerIsOpened; //ѕризнак состо€ни€ €щика: false - закрыт; true - открыт
    property stFailureLastCommand: boolean read GetFailureLastCommand; //ѕризнак завершени€ команды: false - нормально; true - аварийно
    property stFiscalDayIsOpened: boolean read GetFiscalDayIsOpened; //ѕризнак состо€ни€ смены: false - закрыта; true - открыта.
    property stReceiptIsOpened: boolean read GetReceiptIsOpened; //ѕризнак состо€ни€ чека: false - закрыт; true - открыт.
    property stFiscalMode: boolean read GetFiscalMode; //ѕризнак режима работы: false - не фискальный; true - фискальный
    property stOnlinePrintMode: boolean read GetOnlinePrintMode; //ѕризнак режима печати чеков: false - оффлайн; true - онлайн.
    property stPaymentMode: boolean read GetPaymentMode; //ѕризнак режима оплат: false - режим регистраций; true - режим оплат
    property stDisplayShowSumMode: boolean read GetDisplayShowSumMode; //ѕризнак режима вывода сумм на дисплей покупател€: false - пользовательский; true - автономный
    property stRefundReceiptMode: boolean read GetRefundReceiptMode; //ѕризнак типа чека: false - чек продажи; true - чек выплаты.
    property stServiceReceiptMode: boolean read GetServiceReceiptMode; //ѕризнак служебного отчЄта: false - закрыт; true - открыт
    property prUserPassword: byte read GetUserPassword; //„исловой пароль пользовател€ от 0 до 65535. ѕо умолчанию = 0.
    property prUserPasswordStr: string read GetUserPasswordStr; //„исловой пароль пользовател€ от 0 до 65535 в виде строки. ѕо умолчанию = 0.
    property prFPDriverMajorVersion: byte read GetFPDriverMajorVersion; //»ндекс версии
    property prFPDriverMinorVersion: byte read GetFPDriverMinorVersion; //»ндекс подверсии
    property prFPDriverReleaseVersion: byte read GetFPDriverReleaseVersion; //»ндекс релиза
    property prFPDriverBuildVersion: byte read GetFPDriverBuildVersion; //»ндекс сборки
    property prKsefSavePath: string read GetKsefSavePath write SetKsefSavePath; //ќбщий путь дл€ сохранени€ вычитанных пакетов из модема. ѕо умолчанию путь не задан и сохран€етс€ в каталоге с драйвером.
    property glPropertiesModemAutoUpdateMode: boolean read GetPropertiesModemAutoUpdateMode write SetPropertiesModemAutoUpdateMode; //true Ц режим скрытого вызова методов при обновлении значений св€занных с методом свойств. ѕо умолчанию Ц false
    property glModemCodepageOEM: boolean read GetModemCodepageOEM write SetModemCodepageOEM; //true Ц строки в OEM кодировке. ѕо умолчанию Ц false.
    property glModemLangID: byte read GetModemLangID write SetModemLangID; //язык текста ошибок: 0 Ц английский; 1 Ц русский; 2 Ц украинский. ѕо умолчанию Ц 1.
    property prModemRepeatCount: byte read GetModemRepeatCount write SetModemRepeatCount; // оличество повторов команды при отсутствии ответа или ошибке в ответе от модема. ѕо умолчанию Ц 2.
    property prModemLogRecording: boolean read GetModemLogRecording write SetModemLogRecording; //ѕризнак включени€ функции записи трафика коммуникационного порта. ѕо умолчанию Ц false
    property prModemAnswerWaiting: byte read GetModemAnswerWaiting write SetModemAnswerWaiting; //ћножитель таймаута ожидани€ ответа от модема.  ажда€ 1 = таймаут 300 мс задержки. ѕо умолчанию Ц 10 (3000 мс).
    property prModemKsefSavePath: string read GetModemKsefSavePath write SetModemKsefSavePath; //ќбщий путь дл€ сохранени€ вычитанных пакетов из модема. ѕо умолчанию путь не задан и сохран€етс€ в каталоге с драйвером.
    property prGetModemErrorCode: byte read GetModemErrorCode; // од ошибки модема
    property prGetModemErrorText: string read GetModemErrorText; //“екстовое описание ошибки
    property stModemWorkSecondCount: Longint read GetModemWorkSecondCount; //¬рем€ в секундах с момента включени€ ‘–.
    property stFPExchangeModemSecondCount: Longint read GetFPExchangeModemSecondCount; //¬рем€ завершени€ последнего обмена с ‘– в секундах (с момента включени€ ‘–). 2147483647 Ц неизвестно
    property stModemFirstUnsendPIDDateTime: TDateTime read GetModemFirstUnsendPIDDateTime; //ƒата/врем€ первого не переданного эквайеру пакета (по часам ‘–). 07.02.2136 6:28:15 Ц нет ожидающих передачи пакетов
    property stModemFirstUnsendPIDDateTimeStr: string read GetModemFirstUnsendPIDDateTimeStr; //ƒата/врем€ первого не переданного эквайеру пакета (по часам ‘–) в текстовом представлении. 07.02.2136 6:28:15ї Ц нет ожидающих передачи пакетов
    property stModemPID_Unused: Longint read GetModemPID_Unused; //Ќомер первого свободного пакета. 2147483647 Ц SD-карта не инициализирована.
    property stModemPID_CurPers: Longint read GetModemPID_CurPers; //Ќомер пакета текущей персонализации. 2147483647 Ц модем ни разу не персонализирован.
    property stModemPID_LastWrite: Longint read GetModemPID_LastWrite; //Ќомер последнего считанного из ‘– и сохранЄнного на SD-карте пакета. 2147483647 Ц нет ни одного сохранЄнного пакета на SD-карте.
    property stModemPID_LastSign: Longint read GetModemPID_LastSign; //Ќомер последнего подписанного пакета модулем безопасности. 2147483647 Ц нет ни одного подписанного пакета.
    property stModemPID_LastSend: Longint read GetModemPID_LastSend; //Ќомер последнего переданного эквайеру пакета. 2147483647 Ц нет ни одного переданного пакета.
    property stModemSerialNumber: Longint read GetModemSerialNumber; //—ерийный номер модема
    property stModemID_DEV: Longint read GetModemID_DEV; //»дентификатор модема
    property stModemID_SAM: Longint read GetModemID_SAM; //»дентификатор модул€ безопасности
    property stModemNT_SESSION: Longint read GetModemNT_SESSION; //—чЄтчик сеансов св€зи с эквайером.
    property stModemFailCode: byte read GetModemFailCode; // од ошибки модема:
                                                          //0 Ц нет ошибок;
                                                          //1Ц ошибка инициализации драйвера ‘–;
                                                          //2 Ц параметры ‘– изменились во врем€ работы модема;
                                                          //3 Ц нарушена синхронизаци€ в нумерации пакетов между ‘– и модемом;
                                                          //4 Ц данные чека или Z-отчЄта, считанные из ‘–, некорректны;
                                                          //32 Ц ошибка инициализации  —≈‘ (SD-карта);
                                                          //33 Ц  —≈‘ повреждена;
                                                          //34 Ц ошибка создани€ пакета  —≈‘;
                                                          //35 Ц ошибка записи пакета  —≈‘;
                                                          //36 Ц переполнение  —≈‘;
                                                          //64 Ц ошибка инициализации модул€ безопасности;
                                                          //65 Ц ошибка взаимодействи€ с модулем безопасности;
                                                          //66 Ц модуль безопасности заменен;
                                                          //96 Ц эквайер отказалс€ регистрировать ID_DEV+ID_SAM при выполнении технологической сессии.
    property stModemRes1: byte read GetModemRes1; //Ќе используетс€.
    property stModemBatVoltage: Longint read GetModemBatVoltage; //Ќе используетс€.
    property stModemDCVoltage: Longint read GetModemDCVoltage; //Ќе используетс€.
    property stModemBatCurrent: Longint read GetModemBatCurrent; //Ќе используетс€.
    property stModemTemperature: Longint read GetModemTemperature; //Ќе используетс€.
    property stModemState1: byte read GetModemState1; //Ќе используетс€.
    property stModemState2: byte read GetModemState2; //Ќе используетс€.
    property stModemState3: byte read GetModemState3; //—тади€ IP Ц соединени€:
                                                  //0 Ц Initial;
                                                  //1 Ц Starting;
                                                  //2 Ц Closed;
                                                  //3 Ц Stopped;
                                                  //4 Ц Closing;
                                                  //5 Ц Stopping;
                                                  //6 Ц ReqSent;
                                                  //7 Ц AckRcvd;
                                                  //8 Ц AcqSent;
                                                  //9 Ц Opened (соединение установлено)
    property stModemLanState1: byte read GetModemLanState1; //—осто€ние Ethernet TP PHYS Layer:
                                                            //0 Ц LMS_NONE;
                                                            //1 Ц LMS_POR_WAIT;
                                                            //2 Ц LMS_RESET;
                                                            //3 Ц LMS_RESET_WAIT;
                                                            //4 Ц LMS_PHL_ON;
                                                            //5 Ц LMS_PHL_ON_WAIT;
                                                            //6 Ц LMS_PHL_ON_WAIT1;
                                                            //7 Ц LMS_PHL_ON_WAIT2;
                                                            //8 Ц LMS_PHL_ON_WAIT3;
                                                            //9 Ц LMS_MAIN (јктивен).
    property stModemLanState2: byte read GetModemLanState2; //—осто€ние DHCP:
                                                            //0 Ц DHCP_NONE;
                                                            //1 Ц DHCP_START;
                                                            //2 Ц DHCP_SEND_DISCOVER;
                                                            //131 Ц DHCP_WAIT_OFFER;
                                                            //4 Ц DHCP_SEND_REQUEST;
                                                            //133 Ц DHCP_WAIT_ACK;
                                                            //6 Ц DHCP_CHECK_LEASTIME (сконфигурирован успешно)
    property stModemFPExchangeResult: byte read GetModemFPExchangeResult; //–езультат сеанса св€зи с ‘–:
                                                                          //0 Ц нет ошибок;
                                                                          //1 Ц обща€ ошибка;
                                                                          //2 Ц ошибка старта сеанса св€зи;
                                                                          //3 Ц ошибка получени€ данных персонализации;
                                                                          //4 Ц ошибка чтени€ служебной информации  —≈‘;
                                                                          //5 Ц ошибка записи пакета  —≈‘;
                                                                          //6 Ц ошибка создани€ пакета  —≈‘;
                                                                          //7 Ц ошибка чтени€ пакета  —≈‘;
                                                                          //8 Ц ‘– не в фискальном режиме.
                                                                          //251 Ц ошибка св€зи с ‘– на транспортном уровне;
                                                                          //252 Ц ‘– зан€т;
                                                                          //253 Ц конфликт пакетов на транспортном уровне;
                                                                          //254 Ц таймаут св€зи с ‘–;
                                                                          //255 Ц обща€ ошибка обмена с ‘–.
    property stModemACQExchangeResult: byte read GetModemACQExchangeResult; //–езультат сеанса св€зи с эквайером:
                                                                            //0 Ц нет ошибок;
                                                                            //1 Ц обща€ ошибка;
                                                                            //2 Ц таймаут сеанса св€зи;
                                                                            //3 Ц ошибка чтени€ служебной информации  —≈‘;
                                                                            //4 Ц ошибка чтени€ пакета  —≈‘;
                                                                            //5 Ц ошибка записи пакета  —≈‘;
                                                                            //6 Ц некорректна€ длина документа ƒѕ—;
                                                                            //7 Ц некорректный тип вложенной телеграммы ƒѕ—;
                                                                            //8 Ц ошибка при проверке MAC;
                                                                            //9 Ц модуль безопасности сн€т;
                                                                            //240 Ц ошибка установлени€ соединени€ с эквайером;
                                                                            //241 Ц эквайер отверг соединение с данным ID_DEV;
                                                                            //242 Ц внутренн€€ ошибка модема;
                                                                            //243 Ц таймаут ожидани€ ответа от эквайера;
                                                                            //244 Ц эквайер неожиданно закрыл TCP-соединение;
                                                                            //245 Ц неверный формат ответа эквайера;
                                                                            //246 Ц превышено максимальное количество попыток повтора передачи телеграммы;
                                                                            //247 Ц эквайер неожиданно закрыл сессию.
    property stModemRes2: byte read GetModemRes2; //Ќе используетс€.
    property stModemFPExchangeErrorCount: Longint read GetModemFPExchangeErrorCount; // оличество неудачных сеансов св€зи с ‘– с момента последнего удачного сеанса.
    property stModemRSSI: byte read GetModemRSSI; //Ќе используетс€.
    property stModemRSSI_BER: byte read GetModemRSSI_BER; //Ќе используетс€.
    property stModemUSSDResult: string read GetModemUSSDResult; //Ќе используетс€.
    property stModemOSVer: Longint read GetModemOSVer; //¬ерси€ ќ—.
    property stModemOSRev: Longint read GetModemOSRev; //–евизи€ ќ—.
    property stModemSysTime: TDateTime read GetModemSysTime; //—истемные дата и врем€.
    property stModemSysTimeStr: string read GetModemSysTimeStr; //—истемные дата и врем€ в текстовом представлении
    property stModemNETIPAddr: string read GetModemNETIPAddr; //IP Ц адрес сетевого интерфейса.
    property stModemNETGate: string read GetModemNETGate; //IP Ц адрес шлюза дл€ сетевого интерфейса.
    property stModemNETMask: string read GetModemNETMask; //ћаска сети дл€ сетевого интерфейса
    property stModemMODIPAddr: string read GetModemMODIPAddr; //Ќе используетс€.
    property stModemACQIPAddr: string read GetModemACQIPAddr; //IP Ц адрес эквайера.
    property stModemACQPort: Longint read GetModemACQPort; //ѕорт эквайера.
    property stModemACQExchangeSecondCount: Longint read GetModemACQExchangeSecondCount; //¬рем€ завершени€ последнего сеанса св€зи с эквайером в секундах от момента включени€ ‘–.
    property prModemFoundPacket: Cardinal read GetModemFoundPacket; //Ќомер найденного пакета.
    property prModemFoundPacketStr: string read GetModemFoundPacketStr; //Ќомер найденного пакета в текстовом представлении
    property prModemCurrentTaskCode: byte read GetModemCurrentTaskCode; // од текущей задачи модема.
                                                                        //0 Ц нет задачи
                                                                        //1 Ц сесси€ технологической регистрации
                                                                        //2 Ц персонализаци€
                                                                        //3 Ц считывание данных  —≈‘
                                                                        //4 Ц обмен с эквайером
                                                                        //5 Ц подписывание пакета  —≈‘
                                                                        //255 Ц блокировка
    property prModemCurrentTaskText: string read GetModemCurrentTaskText; //“екстовое описание задачи.
    property prModemDriverMajorVersion: Byte read GetModemDriverMajorVersion; //»ндекс версии
    property prModemDriverMinorVersion: byte read GetModemDriverMinorVersion; //»ндекс подверсии
    property prModemDriverReleaseVersion: byte read GetModemDriverReleaseVersion; //»ндекс релиза
    property prModemDriverBuildVersion: byte read GetModemDriverBuildVersion; //»ндекс сборки

//    property  read ;
//    property  read  write ;
  end;

var
  ics: OleVariant;
  mdm: OleVariant;

implementation

uses ComObj;

{ TIKC_E810T }

function TIKC_E810T.FPInitialize: Longint;
begin
  ics:=CreateOleObject('NeoFiscalPrinterDriver.ICS_EP_09');
  Result:=ics.FPInitialize;
end;

function TIKC_E810T.FPOpen(_COMport: string;
                    baudRate: integer = 9600;
                    readTimeout: string = '3';
                    writeTimeout: string = '3'): boolean;
begin
  Result:=ics.FPOpen(_COMport, baudRate, readTimeout, writeTimeout);
end;

function TIKC_E810T.FPOpenStr(_COMport: string; baudRate: integer;
  readTimeout, writeTimeout: string): boolean;
begin
  Result:=ics.FPOpenStr(_COMport, baudRate, readTimeout, writeTimeout);
end;

function TIKC_E810T.FPClose: boolean;
begin
  Result:=ics.FPClose;
end;

function TIKC_E810T.FPSetPassword(userID: byte; oldPassword,
  newPassword: word): boolean;
begin
  Result:=ics.FPSetPassword(userID,oldPassword,newPassword);
end;

function TIKC_E810T.FPRegisterCashier(cashierID: byte; name: string;
  password: word): boolean;
begin
  Result:=ics.FPRegisterCashier(cashierID, name, password);
end;

function TIKC_E810T.FPRefundItem(qty: integer; qtyPrecision: byte;
  printEAN13, printSingleQty, printFromMemory: boolean; itemPrice: integer;
  itemTax: byte; itemName: string; itemCode: Integer): boolean;
begin
  Result:=ics.FPRefundItem(qty, qtyPrecision, printEAN13, printSingleQty, printFromMemory, itemPrice, itemTax, itemName, itemCode);
end;

function TIKC_E810T.FPRefundItemStr(qty: integer; qtyPrecision: byte;
  printEAN13, printSingleQty, printFromMemory: boolean; itemPrice: integer;
  itemTax: byte; itemName: string; itemCode: string): boolean;
begin
  Result:=ics.FPRefundItemStr(qty, qtyPrecision, printEAN13, printSingleQty, printFromMemory, itemPrice, itemTax, itemName, itemCode);
end;

function TIKC_E810T.FPSaleItem(qty: integer;
                        qtyPrecision: byte;
                        printEAN13: boolean;
                        printSingleQty: boolean;
                        printFromMemory: boolean;
                        itemPrice: integer;
                        itemTax: byte;
                        itemName: string;
                        itemCode: Longint): boolean;
begin
  Result:=ics.FPSaleItem(qty, qtyPrecision, printEAN13, printSingleQty, printFromMemory, itemPrice, itemTax, itemName, itemCode);
end;

function TIKC_E810T.FPSaleItemStr(qty: integer; qtyPrecision: byte;
  printEAN13, printSingleQty, printFromMemory: boolean; itemPrice: integer;
  itemTax: byte; itemName, itemCode: string): boolean;
begin
  Result:=ics.FPSaleItemStr(qty, qtyPrecision, printEAN13, printSingleQty, printFromMemory, itemPrice, itemTax, itemName, itemCode);
end;

function TIKC_E810T.FPCommentLine(commentLine: string;
                                  openRefundReceipt: boolean=false): boolean;
begin
  Result:=ics.FPCommentLine(commentLine, openRefundReceipt);
end;

function TIKC_E810T.FPPrintZeroReceipt: boolean;
begin
  Result:=ics.FPPrintZeroReceipt;
end;

function TIKC_E810T.FPLineFeed: boolean;
begin
  Result:=ics.FPLineFeed;
end;

function TIKC_E810T.FPAnnulReceipt: boolean;
begin
  Result:=ics.FPAnnulReceipt;
end;

function TIKC_E810T.FPCashIn(cashSum: Cardinal): boolean;
begin
  Result:=ics.FPCashIn(cashSum);
end;

function TIKC_E810T.FPCashOut(cashSum: Cardinal): boolean;
begin
  Result:=ics.FPCashOut(cashSum);
end;

function TIKC_E810T.FPPayment(paymentForm: byte; paymentSum: integer;
  autoCloseReceipt, asFiscalReceipt: boolean; authCode: string): boolean;
begin
  Result:=ics.FPPayment(paymentForm, paymentSum, autoCloseReceipt, asFiscalReceipt, authCode);
end;

function TIKC_E810T.FPSetAdvHeaderLine(lineID: byte; textLine: string;
  isDoubleWidth, isDoubleHeight: boolean): boolean;
begin
  Result:=ics.FPSetAdvHeaderLine(lineID, textLine, isDoubleWidth, isDoubleHeight);
end;

function TIKC_E810T.FPSetAdvTrailerLine(lineID: byte;
                                        textLine: string;
                                        isDoubleWidth: boolean = false;
                                        isDoubleHeight: boolean = false): boolean;
begin
  Result:=ics.FPSetAdvTrailerLine(lineID, textLine, isDoubleWidth, isDoubleHeight);
end;

function TIKC_E810T.FPSetLineCustomerDisplay(lineID: byte;
  textLine: string): boolean;
begin
  Result:=ics.FPSetLineCustomerDisplay(lineID, textLine);
end;

function TIKC_E810T.FPSetCurrentDate(currentDate: TDateTime): boolean;
begin
  Result:=ics.FPSetCurrentDate(currentDate);
end;

function TIKC_E810T.FPSetCurrentDateStr(currentDateStr: string): boolean;
begin
  Result:=ics.FPSetCurrentDateStr(currentDateStr);
end;

function TIKC_E810T.FPGetCurrentDate: boolean;
begin
  Result:=ics.FPGetCurrentDate;
end;

function TIKC_E810T.FPSetCurrentTime(currentTime: TDateTime): boolean;
begin
  Result:=ics.FPSetCurrentTime(currentTime);
end;

function TIKC_E810T.FPSetCurrentTimeStr(currentTimeStr: string): boolean;
begin
  Result:=ics.FPSetCurrentTimeStr(currentTimeStr);
end;

function TIKC_E810T.FPGetCurrentTime: boolean;
begin
  Result:=ics.FPGetCurrentTime;
end;

function TIKC_E810T.FPOpenCashDrawer(duration: integer): boolean;
begin
  Result:=ics.FPOpenCashDrawer(duration);
end;

function TIKC_E810T.FPPrintHardwareVersion: boolean;
begin
  Result:=ics.FPPrintHardwareVersion;
end;

function TIKC_E810T.FPPrintLastKsefPacket: boolean;
begin
  Result:=ics.FPPrintLastKsefPacket;
end;

function TIKC_E810T.FPPrintKsefPacket(packetID: Cardinal): boolean;
begin
  Result:=ics.FPPrintKsefPacket(packetID);
end;

function TIKC_E810T.FPMakeDiscount(isPercentType, isForItem: boolean;
  value: Integer; textLine: string): boolean;
begin
  Result:=ics.FPMakeDiscount(isPercentType, isForItem, value, textLine);
end;

function TIKC_E810T.FPMakeMarkUp(isPercentType, isForItem: boolean;
  value: integer; textLine: string): boolean;
begin
  Result:=ics.FPMakeMarkUp(isPercentType, isForItem, value, textLine);
end;

function TIKC_E810T.FPOnlineSwitch: boolean;
begin
  Result:=ics.FPOnlineSwitch;
end;

function TIKC_E810T.FPCustomerDisplayModeSwitch: boolean;
begin
  Result:=ics.FPCustomerDisplayModeSwitch;
end;

function TIKC_E810T.FPChangeBaudRate(baudRateIndex: byte): boolean;
begin
  Result:=ics.FPChangeBaudRate;
end;

function TIKC_E810T.FPPrintServiceReportByLine(textLine: string): boolean;
begin
  Result:=ics.FPPrintServiceReportByLine;
end;

function TIKC_E810T.FPPrintServiceReportMultiLine(
  multiLineText: string): boolean;
begin
  Result:=ics.FPPrintServiceReportMultiLine(multiLineText);
end;

function TIKC_E810T.FPCloseServiceReport: boolean;
begin
  Result:=ics.FPCloseServiceReport;
end;

function TIKC_E810T.FPDisableLogo(progPassword: Word): boolean;
begin
  Result:=ics.FPDisableLogo(progPassword);
end;

function TIKC_E810T.FPEnableLogo(progPassword: Word): boolean;
begin
  Result:=ics.FPEnableLogo(progPassword);
end;

function TIKC_E810T.FPSetTaxRates(progPassword: Word): boolean;
begin
  Result:=ics.FPSetTaxRates(progPassword);
end;

function TIKC_E810T.FPGetTaxRates: boolean;
begin
  Result:=ics.FPGetTaxRates;
end;

function TIKC_E810T.FPProgItem(progPassword, qtyPrecision: byte;
  isRefundItem: boolean; itemPrice: integer; itemTax: byte;
  itemName: string; itemCode: Integer): boolean;
begin
  Result:=ics.FPProgItem(progPassword, qtyPrecision, isRefundItem, itemPrice, itemTax, itemName, itemCode);
end;

function TIKC_E810T.FPProgItemStr(progPassword, qtyPrecision: byte;
  isRefundItem: boolean; itemPrice: integer; itemTax: byte; itemName,
  itemCodeStr: string): boolean;
begin
  Result:=ics.FPProgItemStr(progPassword, qtyPrecision, isRefundItem, itemPrice, itemTax, itemName, itemCodeStr);
end;

function TIKC_E810T.FPMakeXReport(reportPassword: Word): boolean;
begin
  Result:=ics.FPMakeXReport(reportPassword);
end;

function TIKC_E810T.FPMakeZReport(reportPassword: Word): boolean;
begin
  Result:=ics.FPMakeZReport(reportPassword);
end;

function TIKC_E810T.FPMakeReportOnItems(reportPassword: byte;
  firstItemCode, lastItemCode: Integer): boolean;
begin
  Result:=ics.FPMakeReportOnItems(reportPassword, firstItemCode, lastItemCode);
end;

function TIKC_E810T.FPMakeReportOnItemsStr(reportPassword: byte;
  firstItemCodeStr, lastItemCodeStr: string): boolean;
begin
  Result:=ics.FPMakeReportOnItemsStr(reportPassword, firstItemCodeStr, lastItemCodeStr);
end;

function TIKC_E810T.FPMakePeriodicReportOnDate(reportPassword: byte;
  firstDate, lastDate: TDateTime): boolean;
begin
  Result:=ics.FPMakePeriodicReportOnDate(reportPassword, firstDate, lastDate);
end;

function TIKC_E810T.FPMakePeriodicReportOnDateStr(reportPassword: byte;
  firstDateStr, lastDateStr: string): boolean;
begin
  Result:=ics.FPMakePeriodicReportOnDateStr(reportPassword, firstDateStr, lastDateStr);
end;

function TIKC_E810T.FPMakePeriodicShortReportOnDate(reportPassword: byte;
  firstDate, lastDate: TDateTime): boolean;
begin
  Result:=ics.FPMakePeriodicShortReportOnDate(reportPassword, firstDate, lastDate);
end;

function TIKC_E810T.FPMakePeriodicShortReportOnDateStr(
  reportPassword: byte; firstDateStr, lastDateStr: string): boolean;
begin
  Result:=ics.FPMakePeriodicShortReportOnDateStr(reportPassword, firstDateStr, lastDateStr);
end;

function TIKC_E810T.FPMakePeriodicReportOnNumber(reportPassword,
  firstNumber, lastNumber: Word): boolean;
begin
  Result:=ics.FPMakePeriodicReportOnNumber(reportPassword, firstNumber, lastNumber);
end;

function TIKC_E810T.FPCutterModeSwitch: boolean;
begin
  Result:=ics.FPCutterModeSwitch;
end;

function TIKC_E810T.FPPrintBarcodeOnReceipt(
  serialCode128B: string): boolean;
begin
  Result:=ics.FPPrintBarcodeOnReceipt(serialCode128B);
end;

function TIKC_E810T.FPPrintBarcodeOnItem(serialEAN13: string): boolean;
begin
  Result:=ics.FPPrintBarcodeOnItem(serialEAN13);
end;

function TIKC_E810T.FPGetPaymentFormNames: boolean;
begin
  Result:=ics.FPGetPaymentFormNames;
end;

function TIKC_E810T.FPGetCashDrawerSum: boolean;
begin
  Result:=ics.FPGetCashDrawerSum;
end;

function TIKC_E810T.FPGetDayReportProperties: boolean;
begin
  Result:=ics.FPGetDayReportProperties;
end;

function TIKC_E810T.FPGetItemData(itemCode: Integer): boolean;
begin
  Result:=ics.FPGetItemData(itemCode);
end;

function TIKC_E810T.FPGetItemDataStr(itemCodeStr: string): boolean;
begin
  Result:=ics.FPGetItemDataStr(itemCodeStr);
end;

function TIKC_E810T.FPGetDayReportData: boolean;
begin
  Result:=ics.FPGetDayReportData;
end;

function TIKC_E810T.FPGetCurrentReceiptData: boolean;
begin
  Result:=ics.FPGetCurrentReceiptData;
end;

function TIKC_E810T.FPGetDayCorrectionsData: boolean;
begin
  Result:=ics.FPGetDayCorrectionsData;
end;

function TIKC_E810T.FPGetDaySumOfAddTaxes: boolean;
begin
  Result:=ics.FPGetDaySumOfAddTaxes;
end;

function TIKC_E810T.FPGetCurrentStatus: boolean;
begin
  Result:=ics.FPGetCurrentStatus;
end;

function TIKC_E810T.FPPrintKsefRange(firstPacketID,
  lastPacketID: Cardinal): boolean;
begin
  Result:=ics.FPPrintKsefRange(firstPacketID, lastPacketID);
end;

function TIKC_E810T.FPPaymentByCard(paymentForm: byte; paymentSum: Word;
  autoCloseReceipt, asFiscalReceipt: boolean; cardInfo,
  authCode: String): boolean;
begin
  Result:=ics.FPPaymentByCard(paymentForm, paymentSum, autoCloseReceipt, asFiscalReceipt, cardInfo, authCode);
end;

function TIKC_E810T.FPPrintModemStatus: boolean;
begin
  Result:=ics.FPPrintModemStatus;
end;

function TIKC_E810T.FPGetUserPassword(userID: byte): boolean;
begin
  Result:=ics.FPGetUserPassword(userID);
end;

function TIKC_E810T.FPPrintBarcodeOnReceiptNew(
  serialCode128C: string): boolean;
begin
  Result:=ics.FPPrintBarcodeOnReceiptNew(serialCode128C);
end;

function TIKC_E810T.FPPrintBarcodeOnServiceReport(
  serialCode128B: string): boolean;
begin
  Result:=ics.FPPrintBarcodeOnServiceReport(serialCode128B);
end;

function TIKC_E810T.FPPrintQRCode(serialQR: string): boolean;
begin
  Result:=ics.FPPrintQRCode(serialQR);
end;

function TIKC_E810T.FPClaimUSBDevice: boolean;
begin
  Result:=ics.FPClaimUSBDevice;
end;

function TIKC_E810T.FPReleaseUSBDevice: boolean;
begin
  Result:=ics.FPReleaseUSBDevice;
end;

function TIKC_E810T.ModemInitialize(_COMportStr: byte): integer;
begin
  mdm:=CreateOleObject('NeoFiscalPrinterDriver.ICS_Modem');
  Result:=mdm.ModemInitialize(_COMportStr);
end;                                              

function TIKC_E810T.ModemAckuirerConnect: boolean;
begin
  Result:=mdm.ModemAckuirerConnect;
end;

function TIKC_E810T.ModemAckuirerUnconditionalConnect: boolean;
begin
  Result:=mdm.ModemAckuirerUnconditionalConnect;
end;

function TIKC_E810T.ModemUpdateStatus: boolean;
begin
  Result:=mdm.ModemUpdateStatus;
end;

function TIKC_E810T.ModemVerifyPacket(packetID: Cardinal): boolean;
begin
  Result:=mdm.ModemVerifyPacket(packetID);
end;

function TIKC_E810T.ModemFindPacket(zReport, receiptNumber: integer;
  receiptType: byte): boolean;
begin
  Result:=mdm.ModemFindPacket(zReport, receiptNumber, receiptType);
end;

function TIKC_E810T.ModemKsefPacket(packetID: Cardinal): boolean;
begin
  Result:=mdm.ModemKsefPacket(packetID);
end;

function TIKC_E810T.ModemReadKsefRange(firstPacketID,
  lastPacketID: Cardinal): boolean;
begin
  Result:=mdm.ModemReadKsefRange(firstPacketID, lastPacketID);
end;

function TIKC_E810T.ModemReadKsefByZReport(zReport: Integer): boolean;
begin
  Result:=mdm.ModemReadKsefByZReport(zReport);
end;

function TIKC_E810T.ModemGetCurrentTask: boolean;
begin
  Result:=mdm.ModemGetCurrentTask;
end;

function TIKC_E810T.ModemFindPacketByDateTime(findDateTime: TDateTime;
  findForward: boolean): boolean;
begin
  Result:=mdm.ModemFindPacketByDateTime(findDateTime, findForward);
end;

function TIKC_E810T.ModemFindPacketByDateTimeStr(findDateTimeStr: string;
  findForward: boolean): boolean;
begin
  Result:=mdm.ModemFindPacketByDateTimeStr(findDateTimeStr, findForward);
end;

function TIKC_E810T.ModemSaveKsefRangeToBin(directory, fileName: string;
  firstPacketID, lastPacketID: Cardinal): boolean;
begin
  Result:=mdm.ModemSaveKsefRangeToBin(directory, fileName, firstPacketID, lastPacketID);
end;

function TIKC_E810T.ModemSaveKsefByZReportTobin(directory,
  fileName: string; zReport: integer): boolean;
begin
  Result:=mdm.ModemSaveKsefByZReportTobin(directory, fileName, zReport);
end;

function TIKC_E810T.GetAnswerWaiting: byte;
begin
  Result:=ics.prAnswerWaiting;
end;

function TIKC_E810T.GetCodepageOEM: boolean;
begin
  Result:=ics.glCodepageOEM;
end;

function TIKC_E810T.GetErrorText: string;
begin
  Result:=ics.prGetErrorText;
end;

function TIKC_E810T.GetLangID: byte;
begin
  Result:=ics.glLangID; 
end;

function TIKC_E810T.GetLogRecording: boolean;
begin
  Result:=ics.prLogRecording;
end;

function TIKC_E810T.GetPrinterError: boolean;
begin
  Result:=ics.prPrinterError;
end;

function TIKC_E810T.GetPropertiesAutoUpdateMod: boolean;
begin
  Result:=ics.glPropertiesAutoUpdateMode;
end;

function TIKC_E810T.GetRepeatCount: byte;
begin
  Result:=ics.prRepeatCount;
end;

function TIKC_E810T.GetReserveByte: byte;
begin
  Result:=ics.prGetReserveByte;
end;

function TIKC_E810T.GetResultByte: byte;
begin
  Result:=ics.prGetResultByte;
end;

function TIKC_E810T.GetStatusByte: byte;
begin
  Result:=ics.prGetStatusByte;
end;

function TIKC_E810T.GetTapeAnalizer: boolean;
begin
  Result:=ics.glTapeAnalizer;
end;

function TIKC_E810T.GetTapeEnded: boolean;
begin
  Result:=ics.prTapeEnded;
end;

function TIKC_E810T.GetTapeNearEnd: boolean;
begin
  Result:=ics.prTapeNearEnd;
end;

function TIKC_E810T.GetUseVirtualPort: boolean;
begin
  Result:=ics.glUseVirtualPort;
end;

function TIKC_E810T.GetVirtualPortOpened: boolean;
begin
  Result:=ics.glVirtualPortOpened;
end;

procedure TIKC_E810T.SetAnswerWaiting(AnswerWaiting: byte);
begin
  ics.prAnswerWaiting:=AnswerWaiting;
end;

procedure TIKC_E810T.SetCodepageOEM(CodepageOEM: boolean);
begin
  ics.glCodepageOEM:=CodepageOEM;
end;

procedure TIKC_E810T.SetLangID(LangID: byte);
begin
  ics.glLangID:=LangID;
end;

procedure TIKC_E810T.SetLogRecording(LogRecording: boolean);
begin
  ics.prLogRecording:=LogRecording;
end;

procedure TIKC_E810T.SetPropertiesAutoUpdateMod(AutoUpdateMode: boolean = false);
begin
  ics.glPropertiesAutoUpdateMode:=AutoUpdateMode;
end;

procedure TIKC_E810T.SetRepeatCount(RepeatCount: byte);
begin
  ics.prRepeatCount:=RepeatCount;
end;

procedure TIKC_E810T.SetTapeAnalizer(TapeAnalizer: boolean = true);
begin
  ics.glTapeAnalizer:=TapeAnalizer;
end;

procedure TIKC_E810T.SetUseVirtualPort(UseVirtualPort: boolean);
begin
  ics.glUseVirtualPort:=UseVirtualPort;
end;

function TIKC_E810T.GetItemCost: Longint;
begin
  Result:=ics.prItemCost;
end;

function TIKC_E810T.GetItemCostStr: string;
begin
  Result:=ics.prItemCostStr;
end;

function TIKC_E810T.GetSumBalance: Longint;
begin
  Result:=ics.prSumBalance;
end;

function TIKC_E810T.GetSumBalanceStr: string;
begin
  Result:=ics.prSumBalanceStr;
end;

function TIKC_E810T.GetSumTotal: Longint;
begin
  Result:=ics.prSumTotal;
end;

function TIKC_E810T.GetSumTotalStr: string;
begin
  Result:=ics.prSumTotalStr;
end;

function TIKC_E810T.GetKSEFPacket: Cardinal;
begin
  Result:=ics.prKSEFPacket;
end;

function TIKC_E810T.GetKSEFPacketStr: string;
begin
  Result:=ics.prKSEFPacketStr;
end;

function TIKC_E810T.GetSumDiscount: Longint;
begin
  Result:=ics.prSumDiscount
end;

function TIKC_E810T.GetSumDiscountStr: string;
begin
  Result:=ics.prSumDiscountStr;
end;

function TIKC_E810T.GetSumMarkup: Longint;
begin
  Result:=ics.prSumMarkup;
end;

function TIKC_E810T.GetSumMarkupStr: string;
begin
  Result:=ics.prSumMarkupStr;
end;

function TIKC_E810T.GetCurrentDate: TDateTime;
begin
  Result:=ics.prCurrentDate;
end;

function TIKC_E810T.GetCurrentDateStr: string;
begin
  Result:=ics.prCurrentDateStr;
end;

function TIKC_E810T.GetCurrentTime: TDateTime;
begin
  Result:=ics.prCurrentTime;
end;

function TIKC_E810T.GetCurrentTimeStr: string;
begin
  Result:=ics.prCurrentTimeStr;
end;

function TIKC_E810T.GetModemError: byte;
begin
  Result:=ics.prModemError;
end;

function TIKC_E810T.GetTaxRatesCount: byte;
begin
  Result:=ics.prTaxRatesCount;
end;

procedure TIKC_E810T.SetTaxRatesCount(TaxRatesCount: byte);
begin
  ics.prTaxRatesCount:=TaxRatesCount;
end;

function TIKC_E810T.GetAddTaxType: boolean;
begin
  Result:=ics.prAddTaxType;
end;

procedure TIKC_E810T.SetAddTaxType(AddTaxType: boolean);
begin
  ics.prAddTaxType:=AddTaxType;
end;

function TIKC_E810T.GetTaxRate1: integer;
begin
  Result:=ics.prTaxRate1;
end;

function TIKC_E810T.GetTaxRate2: integer;
begin
  Result:=ics.prTaxRate2;
end;

function TIKC_E810T.GetTaxRate3: integer;
begin
  Result:=ics.prTaxRate3;
end;

function TIKC_E810T.GetTaxRate4: integer;
begin
  Result:=ics.prTaxRate4;
end;

function TIKC_E810T.GetTaxRate5: integer;
begin
  Result:=ics.prTaxRate5;
end;

function TIKC_E810T.GetTaxRate6: integer;
begin
    Result:=ics.prTaxRate6;
end;

procedure TIKC_E810T.SetTaxRate1(const Value: integer);
begin
    ics.prTaxRate1:=Value;
end;

procedure TIKC_E810T.SetTaxRate2(const Value: integer);
begin
    ics.prTaxRate2:=Value;
end;

procedure TIKC_E810T.SetTaxRate3(const Value: integer);
begin
    ics.prTaxRate3:=Value;
end;

procedure TIKC_E810T.SetTaxRate4(const Value: integer);
begin
    ics.prTaxRate4:=Value;
end;

procedure TIKC_E810T.SetTaxRate5(const Value: integer);
begin
    ics.prTaxRate5:=Value;
end;

function TIKC_E810T.GetUsedAdditionalFee: boolean;
begin
  Result:=ics.prUsedAdditionalFee;
end;

procedure TIKC_E810T.SetUsedAdditionalFee(const Value: boolean);
begin
  ics.prUsedAdditionalFee:=Value;
end;

function TIKC_E810T.GetAddFeeRate1: integer;
begin
  Result:=ics.prAddFeeRate1;
end;

function TIKC_E810T.GetAddFeeRate2: integer;
begin
  Result:=ics.prAddFeeRate2;
end;

function TIKC_E810T.GetAddFeeRate3: integer;
begin
  Result:=ics.prAddFeeRate3;
end;

function TIKC_E810T.GetAddFeeRate4: integer;
begin
  Result:=ics.prAddFeeRate4;
end;

function TIKC_E810T.GetAddFeeRate5: integer;
begin
  Result:=ics.prAddFeeRate5;
end;

function TIKC_E810T.GetAddFeeRate6: integer;
begin
  Result:=ics.prAddFeeRate6;
end;

procedure TIKC_E810T.SetAddFeeRate1(const Value: integer);
begin
  ics.prAddFeeRate1:=value;
end;

procedure TIKC_E810T.SetAddFeeRate2(const Value: integer);
begin
  ics.prAddFeeRate2:=value;
end;

procedure TIKC_E810T.SetAddFeeRate3(const Value: integer);
begin
  ics.prAddFeeRate3:=value;
end;

procedure TIKC_E810T.SetAddFeeRate4(const Value: integer);
begin
  ics.prAddFeeRate4:=value;
end;

procedure TIKC_E810T.SetAddFeeRate5(const Value: integer);
begin
  ics.prAddFeeRate5:=value;
end;

procedure TIKC_E810T.SetAddFeeRate6(const Value: integer);
begin
  ics.prAddFeeRate6:=value;
end;

function TIKC_E810T.GetTaxOnAddFee1: boolean;
begin
  Result:=ics.prTaxOnAddFee1;
end;

function TIKC_E810T.GetTaxOnAddFee2: boolean;
begin
  Result:=ics.prTaxOnAddFee2;
end;

function TIKC_E810T.GetTaxOnAddFee3: boolean;
begin
  Result:=ics.prTaxOnAddFee3;
end;

function TIKC_E810T.GetTaxOnAddFee4: boolean;
begin
  Result:=ics.prTaxOnAddFee4;
end;

function TIKC_E810T.GetTaxOnAddFee5: boolean;
begin
  Result:=ics.prTaxOnAddFee5;
end;

function TIKC_E810T.GetTaxOnAddFee6: boolean;
begin
  Result:=ics.prTaxOnAddFee6;
end;

procedure TIKC_E810T.SetTaxOnAddFee1(const Value: boolean);
begin
  ics.prTaxOnAddFee1:=value;
end;

procedure TIKC_E810T.SetTaxOnAddFee2(const Value: boolean);
begin
  ics.prTaxOnAddFee2:=value;
end;

procedure TIKC_E810T.SetTaxOnAddFee3(const Value: boolean);
begin
  ics.prTaxOnAddFee3:=value;
end;

procedure TIKC_E810T.SetTaxOnAddFee4(const Value: boolean);
begin
  ics.prTaxOnAddFee4:=value;
end;

procedure TIKC_E810T.SetTaxOnAddFee5(const Value: boolean);
begin
  ics.prTaxOnAddFee5:=value;
end;

procedure TIKC_E810T.SetTaxOnAddFee6(const Value: boolean);
begin
  ics.prTaxOnAddFee6:=value;
end;

function TIKC_E810T.GetAddFeeOnRetailPrice1: boolean;
begin
  Result:=ics.prAddFeeOnRetailPrice1;
end;

function TIKC_E810T.GetAddFeeOnRetailPrice2: boolean;
begin
  Result:=ics.prAddFeeOnRetailPrice2;
end;

function TIKC_E810T.GetAddFeeOnRetailPrice3: boolean;
begin
  Result:=ics.prAddFeeOnRetailPrice3;
end;

function TIKC_E810T.GetAddFeeOnRetailPrice4: boolean;
begin
  Result:=ics.prAddFeeOnRetailPrice4;
end;

function TIKC_E810T.GetAddFeeOnRetailPrice5: boolean;
begin
  Result:=ics.prAddFeeOnRetailPrice5;
end;

function TIKC_E810T.GetAddFeeOnRetailPrice6: boolean;
begin
  Result:=ics.prAddFeeOnRetailPrice6;
end;

procedure TIKC_E810T.SetAddFeeOnRetailPrice1(const Value: boolean);
begin
  ics.prAddFeeOnRetailPrice1:=value;
end;

procedure TIKC_E810T.SetAddFeeOnRetailPrice2(const Value: boolean);
begin
  ics.prAddFeeOnRetailPrice2:=value;
end;

procedure TIKC_E810T.SetAddFeeOnRetailPrice3(const Value: boolean);
begin
  ics.prAddFeeOnRetailPrice3:=value;
end;

procedure TIKC_E810T.SetAddFeeOnRetailPrice4(const Value: boolean);
begin
  ics.prAddFeeOnRetailPrice4:=value;
end;

procedure TIKC_E810T.SetAddFeeOnRetailPrice5(const Value: boolean);
begin
  ics.prAddFeeOnRetailPrice5:=value;
end;

procedure TIKC_E810T.SetAddFeeOnRetailPrice6(const Value: boolean);
begin
  ics.prAddFeeOnRetailPrice6:=value;
end;

function TIKC_E810T.GetTaxRatesDate: TDateTime;
begin
  Result:=ics.prTaxRatesDate;
end;

function TIKC_E810T.GetTaxRatesDateStr: string;
begin
  Result:=ics.prTaxRatesDateStr;
end;

function TIKC_E810T.GetNamePaymentForm1: string;
begin
  Result:=ics.GetNamePaymentForm1;
end;

function TIKC_E810T.GetNamePaymentForm10: string;
begin
  Result:=ics.GetNamePaymentForm10;
end;

function TIKC_E810T.GetNamePaymentForm2: string;
begin
  Result:=ics.GetNamePaymentForm2;
end;

function TIKC_E810T.GetNamePaymentForm3: string;
begin
  Result:=ics.GetNamePaymentForm3;
end;

function TIKC_E810T.GetNamePaymentForm4: string;
begin
  Result:=ics.GetNamePaymentForm4;
end;

function TIKC_E810T.GetNamePaymentForm5: string;
begin
  Result:=ics.GetNamePaymentForm5;
end;

function TIKC_E810T.GetNamePaymentForm6: string;
begin
  Result:=ics.GetNamePaymentForm6;
end;

function TIKC_E810T.GetNamePaymentForm7: string;
begin
  Result:=ics.GetNamePaymentForm7;
end;

function TIKC_E810T.GetNamePaymentForm8: string;
begin
  Result:=ics.GetNamePaymentForm8;
end;

function TIKC_E810T.GetNamePaymentForm9: string;
begin
  Result:=ics.GetNamePaymentForm9;
end;

function TIKC_E810T.GetCashDrawerSum: Longint;
begin
  Result:=ics.prCashDrawerSum;
end;

function TIKC_E810T.GetCashDrawerSumStr: string;
begin
  Result:=ics.prCashDrawerSumStr;
end;

function TIKC_E810T.GetCurrentZReport: Integer;
begin
  Result:=ics.prCurrentZReport;
end;

function TIKC_E810T.GetCurrentZReportStr: string;
begin
  Result:=ics.prCurrentZReportStrж
end;

function TIKC_E810T.GetDayEndDate: TDateTime;
begin
  Result:=ics.prDayEndDate;
end;

function TIKC_E810T.GetDayEndDateStr: string;
begin
  Result:=ics.prDayEndDateStr;
end;

function TIKC_E810T.GetDayEndTime: TDateTime;
begin
  Result:=ics.prDayEndTime;
end;

function TIKC_E810T.GetDayEndTimeStr: string;
begin
  Result:=ics.prDayEndTimeStr;
end;

function TIKC_E810T.GetItemsCount: Integer;
begin
  Result:=ics.prItemsCount;
end;

function TIKC_E810T.GetItemsCountStr: string;
begin
  Result:=ics.prItemsCountStr;
end;

function TIKC_E810T.GetLastZReportDate: TDateTime;
begin
  Result:=ics.prLastZReportDate;
end;

function TIKC_E810T.GetLastZReportDateStr: string;
begin
  Result:=ics.prLastZReportDateStr;
end;

function TIKC_E810T.GetItemName: string;
begin
  Result:=ics.prItemName;
end;

function TIKC_E810T.GetItemPrice: integer;
begin
  Result:=ics.prItemPrice;
end;

function TIKC_E810T.GetItemRefundQtyPrecision: byte;
begin
  Result:=ics.prItemRefundQtyPrecision;
end;

function TIKC_E810T.GetItemRefundQuantity: integer;
begin
  Result:=ics.prItemRefundQuantity;
end;

function TIKC_E810T.GetItemRefundSum: Longint;
begin
  Result:=ics.prItemRefundSum;
end;

function TIKC_E810T.GetItemRefundSumStr: string;
begin
  Result:=ics.prItemRefundSumStr;
end;

function TIKC_E810T.GetItemSaleQtyPrecision: byte;
begin
  Result:=ics.prItemSaleQtyPrecision;
end;

function TIKC_E810T.GetItemSaleQuantity: integer;
begin
  Result:=ics.prItemSaleQuantity;
end;

function TIKC_E810T.GetItemSaleSum: Longint;
begin
  Result:=ics.prItemSaleSum;
end;

function TIKC_E810T.GetItemSaleSumStr: string;
begin
  Result:=ics.prItemSaleSumStr;
end;

function TIKC_E810T.GetItemTax: byte;
begin
  Result:=ics.prItemTax;
end;

function TIKC_E810T.GetDayRefundReceiptsCount: integer;
begin
  Result:=ics.prDayRefundReceiptsCount;
end;

function TIKC_E810T.GetDayRefundReceiptsCountStr: string;
begin
  Result:=ics.prDayRefundReceiptsCountStr;
end;

function TIKC_E810T.GetDaySaleReceiptsCount: integer;
begin
  Result:=ics.prDaySaleReceiptsCount;
end;

function TIKC_E810T.GetDaySaleReceiptsCountStr: string;
begin
  Result:=ics.prDaySaleReceiptsCountStr;
end;

function TIKC_E810T.GetDaySaleSumOnTax1: Cardinal;
begin
  Result:=ics.prDaySaleSumOnTax1;
end;

function TIKC_E810T.GetDaySaleSumOnTax1Str: string;
begin
  Result:=ics.prDaySaleSumOnTax1Str;
end;

function TIKC_E810T.GetDaySaleSumOnTax2: Cardinal;
begin
  Result:=ics.prDaySaleSumOnTax2;
end;

function TIKC_E810T.GetDaySaleSumOnTax2Str: string;
begin
  Result:=ics.prDaySaleSumOnTax2Str;
end;

function TIKC_E810T.GetDaySaleSumOnTax3: Cardinal;
begin
  Result:=ics.prDaySaleSumOnTax3;
end;

function TIKC_E810T.GetDaySaleSumOnTax3Str: string;
begin
  Result:=ics.prDaySaleSumOnTax3Str;
end;

function TIKC_E810T.GetDaySaleSumOnTax4: Cardinal;
begin
  Result:=ics.prDaySaleSumOnTax4;
end;

function TIKC_E810T.GetDaySaleSumOnTax4Str: string;
begin
  Result:=ics.prDaySaleSumOnTax4Str;
end;

function TIKC_E810T.GetDaySaleSumOnTax5: Cardinal;
begin
  Result:=ics.prDaySaleSumOnTax5;
end;

function TIKC_E810T.GetDaySaleSumOnTax5Str: string;
begin
  Result:=ics.prDaySaleSumOnTax5Str;
end;

function TIKC_E810T.GetDaySaleSumOnTax6: Cardinal;
begin
  Result:=ics.prDaySaleSumOnTax6;
end;

function TIKC_E810T.GetDaySaleSumOnTax6Str: string;
begin
  Result:=ics.prDaySaleSumOnTax6Str;
end;

function TIKC_E810T.GetDayRefundSumOnTax1: Cardinal;
begin
  Result:=ics.prDayRefundSumOnTax1;
end;

function TIKC_E810T.GetDayRefundSumOnTax1Str: string;
begin
  Result:=ics.prDayRefundSumOnTax1Str;
end;

function TIKC_E810T.GetDayRefundSumOnTax2: Cardinal;
begin
  Result:=ics.prDayRefundSumOnTax2;
end;

function TIKC_E810T.GetDayRefundSumOnTax2Str: string;
begin
  Result:=ics.prDayRefundSumOnTax2Str;
end;

function TIKC_E810T.GetDayRefundSumOnTax3: Cardinal;
begin
  Result:=ics.prDayRefundSumOnTax3;
end;

function TIKC_E810T.GetDayRefundSumOnTax3Str: string;
begin
  Result:=ics.prDayRefundSumOnTax3Str;
end;

function TIKC_E810T.GetDayRefundSumOnTax4: Cardinal;
begin
  Result:=ics.prDayRefundSumOnTax4;
end;

function TIKC_E810T.GetDayRefundSumOnTax4Str: string;
begin
  Result:=ics.prDayRefundSumOnTax4Str;
end;

function TIKC_E810T.GetDayRefundSumOnTax5: Cardinal;
begin
  Result:=ics.prDayRefundSumOnTax5;
end;

function TIKC_E810T.GetDayRefundSumOnTax5Str: string;
begin
  Result:=ics.prDayRefundSumOnTax5Str;
end;

function TIKC_E810T.GetDayRefundSumOnTax6: Cardinal;
begin
  Result:=ics.prDayRefundSumOnTax6;
end;

function TIKC_E810T.GetDayRefundSumOnTax6Str: string;
begin
  Result:=ics.prDayRefundSumOnTax6Str;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm1: Cardinal;
begin
  Result:=ics.prDaySaleSumOnPayForm1;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm10: Cardinal;
begin
  Result:=ics.prDaySaleSumOnPayForm10;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm10Str: string;
begin
  Result:=ics.prDaySaleSumOnPayForm10Str;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm1Str: string;
begin
  Result:=ics.prDaySaleSumOnPayForm1Str;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm2: Cardinal;
begin
  Result:=ics.prDaySaleSumOnPayForm2;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm2Str: string;
begin
  Result:=ics.prDaySaleSumOnPayForm2Str;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm3: Cardinal;
begin
  Result:=ics.prDaySaleSumOnPayForm3;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm3Str: string;
begin
  Result:=ics.prDaySaleSumOnPayForm3Str;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm4: Cardinal;
begin
  Result:=ics.prDaySaleSumOnPayForm4;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm4Str: string;
begin
  Result:=ics.prDaySaleSumOnPayForm4Str;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm5: Cardinal;
begin
  Result:=ics.prDaySaleSumOnPayForm5;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm5Str: string;
begin
  Result:=ics.prDaySaleSumOnPayForm5Str;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm6: Cardinal;
begin
  Result:=ics.prDaySaleSumOnPayForm6;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm6Str: string;
begin
  Result:=ics.prDaySaleSumOnPayForm6Str;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm7: Cardinal;
begin
  Result:=ics.prDaySaleSumOnPayForm7;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm7Str: string;
begin
  Result:=ics.prDaySaleSumOnPayForm7Str;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm8: Cardinal;
begin
  Result:=ics.prDaySaleSumOnPayForm8;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm8Str: string;
begin
  Result:=ics.prDaySaleSumOnPayForm8Str;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm9: Cardinal;
begin
  Result:=ics.prDaySaleSumOnPayForm9;
end;

function TIKC_E810T.GetDaySaleSumOnPayForm9Str: string;
begin
  Result:=ics.prDaySaleSumOnPayForm9Str;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm1: Cardinal;
begin
  Result:=ics.prDayRefundSumOnPayForm1;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm10: Cardinal;
begin
  Result:=ics.prDayRefundSumOnPayForm10;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm2: Cardinal;
begin
  Result:=ics.prDayRefundSumOnPayForm2;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm3: Cardinal;
begin
  Result:=ics.prDayRefundSumOnPayForm3;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm4: Cardinal;
begin
  Result:=ics.prDayRefundSumOnPayForm4;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm5: Cardinal;
begin
  Result:=ics.prDayRefundSumOnPayForm5;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm6: Cardinal;
begin
  Result:=ics.prDayRefundSumOnPayForm6;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm7: Cardinal;
begin
  Result:=ics.prDayRefundSumOnPayForm7;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm8: Cardinal;
begin
  Result:=ics.prDayRefundSumOnPayForm8;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm9: Cardinal;
begin
  Result:=ics.prDayRefundSumOnPayForm9;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm10Str: string;
begin
  Result:=ics.prDayRefundSumOnPayForm10Str;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm1Str: string;
begin
  Result:=ics.prDayRefundSumOnPayForm1Str;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm2Str: string;
begin
  Result:=ics.prDayRefundSumOnPayForm2Str;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm3Str: string;
begin
  Result:=ics.prDayRefundSumOnPayForm3Str;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm4Str: string;
begin
  Result:=ics.prDayRefundSumOnPayForm4Str;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm5Str: string;
begin
  Result:=ics.prDayRefundSumOnPayForm5Str;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm6Str: string;
begin
  Result:=ics.prDayRefundSumOnPayForm6Str;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm7Str: string;
begin
  Result:=ics.prDayRefundSumOnPayForm7Str;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm8Str: string;
begin
  Result:=ics.prDayRefundSumOnPayForm8Str;
end;

function TIKC_E810T.GetDayRefundSumOnPayForm9Str: string;
begin
  Result:=ics.prDayRefundSumOnPayForm9Str;
end;

function TIKC_E810T.GetDayDiscountSumOnRefunds: Cardinal;
begin
  Result:=ics.prDayDiscountSumOnRefunds;
end;

function TIKC_E810T.GetDayDiscountSumOnRefundsStr: string;
begin
  Result:=ics.prDayDiscountSumOnRefundsStr;
end;

function TIKC_E810T.GetDayDiscountSumOnSales: Cardinal;
begin
  Result:=ics.prDayDiscountSumOnSales;
end;

function TIKC_E810T.GetDayDiscountSumOnSalesStr: string;
begin
  Result:=ics.prDayDiscountSumOnSalesStr;
end;

function TIKC_E810T.GetDayMarkupSumOnSales: Cardinal;
begin
  Result:=ics.prDayMarkupSumOnSales;
end;

function TIKC_E810T.GetDayMarkupSumOnRefunds: Cardinal;
begin
  Result:=ics.prDayMarkupSumOnRefunds;
end;

function TIKC_E810T.GetDayMarkupSumOnSalesStr: string;
begin
  Result:=ics.prDayMarkupSumOnSalesStr;
end;

function TIKC_E810T.GetDayMarkupSumOnRefundsStr: string;
begin
  Result:=ics.prDayMarkupSumOnRefundsStr; 
end;

function TIKC_E810T.GetDayCashInSum: Cardinal;
begin
  Result:=ics.prDayCashInSum;
end;

function TIKC_E810T.GetDayCashInSumStr: string;
begin
  Result:=ics.prDayCashInSumStr;
end;

function TIKC_E810T.GetDayCashOutSum: Cardinal;
begin
  Result:=ics.prDayCashOutSum;
end;

function TIKC_E810T.GetDayCashOutSumStr: string;
begin
  Result:=ics.prDayCashOutSumStr;
end;

function TIKC_E810T.GetCurReceiptTax1Sum: Cardinal;
begin
  Result:=ics.prCurReceiptTax1Sum;
end;

function TIKC_E810T.GetCurReceiptTax2Sum: Cardinal;
begin
  Result:=ics.prCurReceiptTax2Sum;
end;

function TIKC_E810T.GetCurReceiptTax3Sum: Cardinal;
begin
  Result:=ics.prCurReceiptTax3Sum;
end;

function TIKC_E810T.GetCurReceiptTax4Sum: Cardinal;
begin
  Result:=ics.prCurReceiptTax4Sum;
end;

function TIKC_E810T.GetCurReceiptTax5Sum: Cardinal;
begin
  Result:=ics.prCurReceiptTax5Sum;
end;

function TIKC_E810T.GetCurReceiptTax6Sum: Cardinal;
begin
  Result:=ics.prCurReceiptTax6Sum;
end;

function TIKC_E810T.GetCurReceiptTax1SumStr: string;
begin
  Result:=ics.prCurReceiptTax1SumStr;
end;

function TIKC_E810T.GetCurReceiptTax2SumStr: string;
begin
  Result:=ics.prCurReceiptTax2SumStr;
end;

function TIKC_E810T.GetCurReceiptTax3SumStr: string;
begin
  Result:=ics.prCurReceiptTax3SumStr;
end;

function TIKC_E810T.GetCurReceiptTax4SumStr: string;
begin
  Result:=ics.prCurReceiptTax4SumStr;
end;

function TIKC_E810T.GetCurReceiptTax5SumStr: string;
begin
  Result:=ics.prCurReceiptTax5SumStr;
end;

function TIKC_E810T.GetCurReceiptTax6SumStr: string;
begin
  Result:=ics.prCurReceiptTax6SumStr;
end;

function TIKC_E810T.GetCurReceiptPayForm10Sum: Cardinal;
begin
  Result:=ics.prCurReceiptPayForm10Sum;
end;

function TIKC_E810T.GetCurReceiptPayForm1Sum: Cardinal;
begin
  Result:=ics.prCurReceiptPayForm1Sum;
end;

function TIKC_E810T.GetCurReceiptPayForm2Sum: Cardinal;
begin
  Result:=ics.prCurReceiptPayForm2Sum;
end;

function TIKC_E810T.GetCurReceiptPayForm3Sum: Cardinal;
begin
  Result:=ics.prCurReceiptPayForm3Sum;
end;

function TIKC_E810T.GetCurReceiptPayForm4Sum: Cardinal;
begin
  Result:=ics.prCurReceiptPayForm4Sum;
end;

function TIKC_E810T.GetCurReceiptPayForm5Sum: Cardinal;
begin
  Result:=ics.prCurReceiptPayForm5Sum;
end;

function TIKC_E810T.GetCurReceiptPayForm6Sum: Cardinal;
begin
  Result:=ics.prCurReceiptPayForm6Sum;
end;

function TIKC_E810T.GetCurReceiptPayForm7Sum: Cardinal;
begin
  Result:=ics.prCurReceiptPayForm7Sum;
end;

function TIKC_E810T.GetCurReceiptPayForm8Sum: Cardinal;
begin
  Result:=ics.prCurReceiptPayForm8Sum;
end;

function TIKC_E810T.GetCurReceiptPayForm9Sum: Cardinal;
begin
  Result:=ics.prCurReceiptPayForm9Sum;
end;

function TIKC_E810T.GetCurReceiptPayForm10SumStr: string;
begin
  Result:=ics.prCurReceiptPayForm10SumStr;
end;

function TIKC_E810T.GetCurReceiptPayForm1SumStr: string;
begin
  Result:=ics.prCurReceiptPayForm1SumStr;
end;

function TIKC_E810T.GetCurReceiptPayForm2SumStr: string;
begin
  Result:=ics.prCurReceiptPayForm2SumStr;
end;

function TIKC_E810T.GetCurReceiptPayForm3SumStr: string;
begin
  Result:=ics.prCurReceiptPayForm3SumStr;
end;

function TIKC_E810T.GetCurReceiptPayForm4SumStr: string;
begin
  Result:=ics.prCurReceiptPayForm4SumStr;
end;

function TIKC_E810T.GetCurReceiptPayForm5SumStr: string;
begin
  Result:=ics.prCurReceiptPayForm5SumStr;
end;

function TIKC_E810T.GetCurReceiptPayForm6SumStr: string;
begin
  Result:=ics.prCurReceiptPayForm6SumStr;
end;

function TIKC_E810T.GetCurReceiptPayForm7SumStr: string;
begin
  Result:=ics.prCurReceiptPayForm7SumStr;
end;

function TIKC_E810T.GetCurReceiptPayForm8SumStr: string;
begin
  Result:=ics.prCurReceiptPayForm8SumStr;
end;

function TIKC_E810T.GetCurReceiptPayForm9SumStr: string;
begin
  Result:=ics.prCurReceiptPayForm9SumStr;
end;

function TIKC_E810T.GetDayAnnuledSaleReceiptsCount: Integer;
begin
  Result:=ics.prDayAnnuledSaleReceiptsCount;
end;

function TIKC_E810T.GetDayAnnuledSaleReceiptsCountStr: string;
begin
  Result:=ics.prDayAnnuledSaleReceiptsCountStr;
end;

function TIKC_E810T.GetDayAnnuledSaleReceiptsSum: Cardinal;
begin
  Result:=ics.prDayAnnuledSaleReceiptsSum;
end;

function TIKC_E810T.GetDayAnnuledSaleReceiptsSumStr: string;
begin
  Result:=ics.prDayAnnuledSaleReceiptsSumStr;
end;

function TIKC_E810T.GetDayAnnuledRefundReceiptsCount: integer;
begin
  Result:=ics.prDayAnnuledRefundReceiptsCount;
end;

function TIKC_E810T.GetDayAnnuledRefundReceiptsCountStr: string;
begin
  Result:=ics.prDayAnnuledRefundReceiptsCountStr;
end;

function TIKC_E810T.GetDayAnnuledRefundReceiptsSum: Cardinal;
begin
  Result:=ics.prDayAnnuledRefundReceiptsSum;
end;

function TIKC_E810T.GetDayAnnuledRefundReceiptsSumStr: string;
begin
  Result:=ics.prDayAnnuledRefundReceiptsSumStr;
end;

function TIKC_E810T.GetDaySaleCancelingsCount: Integer;
begin
  Result:=ics.prDaySaleCancelingsCount;
end;

function TIKC_E810T.GetDaySaleCancelingsCountStr: string;
begin
  Result:=ics.prDaySaleCancelingsCountStr;
end;

function TIKC_E810T.GetDaySaleCancelingsSum: Cardinal;
begin
  Result:=ics.prDaySaleCancelingsSum;
end;

function TIKC_E810T.GetDaySaleCancelingsSumStr: String;
begin
  Result:=ics.prDaySaleCancelingsSumStr;
end;

function TIKC_E810T.GetDayRefundCancelingsCount: Integer;
begin
  Result:=ics.prDayRefundCancelingsCount;
end;

function TIKC_E810T.GetDayRefundCancelingsCountStr: string;
begin
  Result:=ics.prDayRefundCancelingsCountStr;
end;

function TIKC_E810T.GetDayRefundCancelingsSum: Cardinal;
begin
  Result:=ics.prDayRefundCancelingsSum;
end;

function TIKC_E810T.GetDayRefundCancelingsSumStr: string;
begin
  Result:=ics.prDayRefundCancelingsSumStr;
end;

function TIKC_E810T.GetDaySumAddTaxOfSale1: Cardinal;
begin
  Result:=ics.prDaySumAddTaxOfSale1;
end;

function TIKC_E810T.GetDaySumAddTaxOfSale2: Cardinal;
begin
  Result:=ics.prDaySumAddTaxOfSale2;
end;

function TIKC_E810T.GetDaySumAddTaxOfSale3: Cardinal;
begin
  Result:=ics.prDaySumAddTaxOfSale3;
end;

function TIKC_E810T.GetDaySumAddTaxOfSale4: Cardinal;
begin
  Result:=ics.prDaySumAddTaxOfSale4;
end;

function TIKC_E810T.GetDaySumAddTaxOfSale5: Cardinal;
begin
  Result:=ics.prDaySumAddTaxOfSale5;
end;

function TIKC_E810T.GetDaySumAddTaxOfSale6: Cardinal;
begin
  Result:=ics.prDaySumAddTaxOfSale6;
end;

function TIKC_E810T.GetDaySumAddTaxOfSale1Str: string;
begin
  Result:=ics.prDaySumAddTaxOfSale1Str;
end;

function TIKC_E810T.GetDaySumAddTaxOfSale2Str: string;
begin
  Result:=ics.prDaySumAddTaxOfSale2Str;
end;

function TIKC_E810T.GetDaySumAddTaxOfSale3Str: string;
begin
  Result:=ics.prDaySumAddTaxOfSale3Str;
end;

function TIKC_E810T.GetDaySumAddTaxOfSale4Str: string;
begin
  Result:=ics.prDaySumAddTaxOfSale4Str;
end;

function TIKC_E810T.GetDaySumAddTaxOfSale5Str: string;
begin
  Result:=ics.prDaySumAddTaxOfSale5Str;
end;

function TIKC_E810T.GetDaySumAddTaxOfSale6Str: string;
begin
  Result:=ics.prDaySumAddTaxOfSale6Str;
end;

function TIKC_E810T.GetDaySumAddTaxOfRefund1: Cardinal;
begin
  Result:=ics.prDaySumAddTaxOfRefund1;
end;

function TIKC_E810T.GetDaySumAddTaxOfRefund2: Cardinal;
begin
  Result:=ics.prDaySumAddTaxOfRefund2;
end;

function TIKC_E810T.GetDaySumAddTaxOfRefund3: Cardinal;
begin
  Result:=ics.prDaySumAddTaxOfRefund3;
end;

function TIKC_E810T.GetDaySumAddTaxOfRefund4: Cardinal;
begin
  Result:=ics.prDaySumAddTaxOfRefund4;
end;

function TIKC_E810T.GetDaySumAddTaxOfRefund5: Cardinal;
begin
  Result:=ics.prDaySumAddTaxOfRefund5;
end;

function TIKC_E810T.GetDaySumAddTaxOfRefund6: Cardinal;
begin
  Result:=ics.prDaySumAddTaxOfRefund6;
end;

function TIKC_E810T.GetDaySumAddTaxOfRefund1Str: string;
begin
  Result:=ics.prDaySumAddTaxOfRefund1Str;
end;

function TIKC_E810T.GetDaySumAddTaxOfRefund2Str: string;
begin
  Result:=ics.prDaySumAddTaxOfRefund2Str;
end;

function TIKC_E810T.GetDaySumAddTaxOfRefund3Str: string;
begin
  Result:=ics.prDaySumAddTaxOfRefund3Str;
end;

function TIKC_E810T.GetDaySumAddTaxOfRefund4Str: string;
begin
  Result:=ics.prDaySumAddTaxOfRefund4Str;
end;

function TIKC_E810T.GetDaySumAddTaxOfRefund5Str: string;
begin
  Result:=ics.prDaySumAddTaxOfRefund5Str;
end;

function TIKC_E810T.GetDaySumAddTaxOfRefund6Str: string;
begin
  Result:=ics.prDaySumAddTaxOfRefund6Str;
end;

function TIKC_E810T.GetSerialNumber: string;
begin
  Result:=ics.prSerialNumber;
end;

function TIKC_E810T.GetFiscalNumber: string;
begin
  Result:=ics.prFiscalNumber;
end;

function TIKC_E810T.GetTaxNumber: string;
begin
  Result:=ics.prTaxNumber;
end;

function TIKC_E810T.GetDateFiscalization: TDateTime;
begin
  Result:=ics.prDateFiscalization;
end;

function TIKC_E810T.GetDateFiscalizationStr: string;
begin
  Result:=ics.prDateFiscalizationStr;
end;

function TIKC_E810T.GetTimeFiscalization: TDateTime;
begin
  Result:=ics.prTimeFiscalization;
end;

function TIKC_E810T.GetTimeFiscalizationStr: string;
begin
  Result:=ics.prTimeFiscalizationStr;
end;

function TIKC_E810T.GetHardwareVersion: string;
begin
  Result:=ics.prHardwareVersion;
end;

function TIKC_E810T.GetHeadLine1: string;
begin
  Result:=ics.prHeadLine1;
end;

function TIKC_E810T.GetHeadLine2: string;
begin
  Result:=ics.prHeadLine2;
end;

function TIKC_E810T.GetHeadLine3: string;
begin
  Result:=ics.prHeadLine3;
end;

function TIKC_E810T.GetUseAdditionalFee: boolean;
begin
  Result:=ics.stUseAdditionalFee;
end;

function TIKC_E810T.GetUseAdditionalTax: boolean;
begin
  Result:=ics.stUseAdditionalTax;
end;

function TIKC_E810T.GetUseCutter: boolean;
begin
  Result:=ics.stUseCutter;
end;

function TIKC_E810T.GetUseFontB: boolean;
begin
  Result:=ics.stUseFontB;
end;

function TIKC_E810T.GetUseTradeLogo: boolean;
begin
  Result:=ics.stUseTradeLogo;
end;

function TIKC_E810T.GetCashDrawerIsOpened: boolean;
begin
  Result:=ics.stCashDrawerIsOpened;
end;

function TIKC_E810T.GetFailureLastCommand: boolean;
begin
  Result:=ics.stFailureLastCommand;
end;

function TIKC_E810T.GetFiscalDayIsOpened: boolean;
begin
  Result:=ics.stFiscalDayIsOpened;
end;

function TIKC_E810T.GetFiscalMode: boolean;
begin
  Result:=ics.stFiscalMode;
end;

function TIKC_E810T.GetOnlinePrintMode: boolean;
begin
  Result:=ics.stOnlinePrintMode;
end;

function TIKC_E810T.GetReceiptIsOpened: boolean;
begin
  Result:=ics.stReceiptIsOpened;
end;

function TIKC_E810T.GetPaymentMode: boolean;
begin
  Result:=ics.stPaymentMode;
end;

function TIKC_E810T.GetDisplayShowSumMode: boolean;
begin
  Result:=ics.stDisplayShowSumMode;
end;

function TIKC_E810T.GetRefundReceiptMode: boolean;
begin
  Result:=ics.stRefundReceiptMode;
end;

function TIKC_E810T.GetServiceReceiptMode: boolean;
begin
  Result:=ics.stServiceReceiptMode;
end;

function TIKC_E810T.GetUserPassword: byte;
begin
  Result:=ics.prUserPassword;
end;

function TIKC_E810T.GetUserPasswordStr: string;
begin
  Result:=ics.prUserPasswordStr;
end;

function TIKC_E810T.GetFPDriverBuildVersion: byte;
begin
  Result:=ics.prFPDriverBuildVersion;
end;

function TIKC_E810T.GetFPDriverMajorVersion: byte;
begin
  Result:=ics.prFPDriverMajorVersion;
end;

function TIKC_E810T.GetFPDriverMinorVersion: byte;
begin
  Result:=ics.prFPDriverMinorVersion;
end;

function TIKC_E810T.GetFPDriverReleaseVersion: byte;
begin
  Result:=ics.prFPDriverReleaseVersion;
end;

function TIKC_E810T.GetKsefSavePath: string;
begin
  Result:=mdm.prKsefSavePath;
end;

procedure TIKC_E810T.SetKsefSavePath(const Value: string);
begin
  mdm.prKsefSavePath:=Value;
end;

function TIKC_E810T.GetPropertiesModemAutoUpdateMode: boolean;
begin
  Result:=mdm.glPropertiesAutoUpdateMode;
end;

procedure TIKC_E810T.SetPropertiesModemAutoUpdateMode(
  const Value: boolean);
begin
  mdm.glPropertiesAutoUpdateMode:=Value;
end;

function TIKC_E810T.GetModemCodepageOEM: boolean;
begin
  Result:=mdm.glCodepageOEM;
end;

procedure TIKC_E810T.SetModemCodepageOEM(const Value: boolean);
begin
  mdm.glCodepageOEM:=Value;
end;

function TIKC_E810T.GetModemLangID: byte;
begin
  Result:=mdm.glLangID;
end;

procedure TIKC_E810T.SetModemLangID(const Value: byte);
begin
  mdm.glLangID:=Value;
end;

function TIKC_E810T.GetModemRepeatCount: byte;
begin
  Result:=mdm.prRepeatCount;
end;

procedure TIKC_E810T.SetModemRepeatCount(const Value: byte);
begin
  mdm.prRepeatCount:=Value;
end;

function TIKC_E810T.GetModemLogRecording: boolean;
begin
  Result:=mdm.prLogRecording;
end;

procedure TIKC_E810T.SetModemLogRecording(const Value: boolean);
begin
  mdm.prLogRecording:=Value;
end;

function TIKC_E810T.GetModemAnswerWaiting: byte;
begin
  Result:=mdm.prAnswerWaiting;
end;

procedure TIKC_E810T.SetModemAnswerWaiting(const Value: byte);
begin
  mdm.prAnswerWaiting:=Value;
end;

function TIKC_E810T.GetModemKsefSavePath: string;
begin
  Result:=mdm.prKsefSavePath;
end;

procedure TIKC_E810T.SetModemKsefSavePath(const Value: string);
begin
  mdm.prKsefSavePath:=Value;
end;

function TIKC_E810T.GetModemErrorCode: byte;
begin
  Result:=mdm.prGetErrorCode;
end;

function TIKC_E810T.GetModemErrorText: string;
begin
  Result:=mdm.prGetErrorText;
end;

function TIKC_E810T.GetModemWorkSecondCount: Longint;
begin
  Result:=mdm.stWorkSecondCount;
end;

function TIKC_E810T.GetFPExchangeModemSecondCount: Longint;
begin
  Result:=mdm.stFPExchangeSecondCount;
end;

function TIKC_E810T.GetModemFirstUnsendPIDDateTime: TDateTime;
begin
  Result:=mdm.stFirstUnsendPIDDateTime;
end;

function TIKC_E810T.GetModemFirstUnsendPIDDateTimeStr: string;
begin
  Result:=mdm.stFirstUnsendPIDDateTimeStr;
end;

function TIKC_E810T.GetModemPID_Unused: Longint;
begin
  Result:=mdm.stPID_Unused;
end;

function TIKC_E810T.GetModemPID_CurPers: Longint;
begin
  Result:=mdm.stPID_CurPers;
end;

function TIKC_E810T.GetModemPID_LastWrite: Longint;
begin
  Result:=mdm.stPID_LastWrite;
end;

function TIKC_E810T.GetModemPID_LastSign: Longint;
begin
  Result:=mdm.stPID_LastSign;
end;

function TIKC_E810T.GetModemPID_LastSend: Longint;
begin
  Result:=mdm.stPID_LastSend;
end;

function TIKC_E810T.GetModemSerialNumber: Longint;
begin
  Result:=mdm.stSerialNumber;
end;

function TIKC_E810T.GetModemID_DEV: Longint;
begin
  Result:=mdm.stID_DEV;
end;

function TIKC_E810T.GetModemID_SAM: Longint;
begin
  Result:=mdm.stID_SAM;
end;

function TIKC_E810T.GetModemNT_SESSION: Longint;
begin
  Result:=mdm.stNT_SESSION;
end;

function TIKC_E810T.GetModemFailCode: byte;
begin
  Result:=mdm.stFailCode;
end;

function TIKC_E810T.GetModemState3: byte;
begin
  Result:=mdm.stState3;
end;

function TIKC_E810T.GetModemLanState1: byte;
begin
  Result:=mdm.stLanState1;
end;

function TIKC_E810T.GetModemLanState2: byte;
begin
  Result:=mdm.stLanState2;
end;

function TIKC_E810T.GetModemFPExchangeResult: byte;
begin
  Result:=mdm.stFPExchangeResult;
end;

function TIKC_E810T.GetModemACQExchangeResult: byte;
begin
  Result:=mdm.stACQExchangeResult;
end;

function TIKC_E810T.GetModemFPExchangeErrorCount: Longint;
begin
  Result:=mdm.stFPExchangeErrorCount;
end;

function TIKC_E810T.GetModemOSVer: Longint;
begin
  Result:=mdm.stOSVer;
end;

function TIKC_E810T.GetModemOSRev: Longint;
begin
  Result:=mdm.stOSRev;
end;

function TIKC_E810T.GetModemSysTime: TDateTime;
begin
  Result:=mdm.stSysTime;
end;

function TIKC_E810T.GetModemSysTimeStr: string;
begin
  Result:=mdm.stSysTimeStr;
end;

function TIKC_E810T.GetModemNETIPAddr: string;
begin
  Result:=mdm.stNETIPAddr;
end;

function TIKC_E810T.GetModemNETGate: string;
begin
  Result:=mdm.stNETGate;
end;

function TIKC_E810T.GetModemNETMask: string;
begin
  Result:=mdm.stNETMask;
end;

function TIKC_E810T.GetModemACQIPAddr: string;
begin
  Result:=mdm.stACQIPAddr;
end;

function TIKC_E810T.GetModemACQPort: Longint;
begin
  Result:=mdm.stACQPort;
end;

function TIKC_E810T.GetModemACQExchangeSecondCount: Longint;
begin
  Result:=mdm.stACQExchangeSecondCount;
end;

function TIKC_E810T.GetModemFoundPacket: Cardinal;
begin
  Result:=mdm.prFoundPacket;
end;

function TIKC_E810T.GetModemFoundPacketStr: string;
begin
  Result:=mdm.prFoundPacketStr;
end;

function TIKC_E810T.GetModemCurrentTaskCode: byte;
begin
  Result:=mdm.prCurrentTaskCode;
end;

function TIKC_E810T.GetModemCurrentTaskText: string;
begin
  Result:=mdm.prCurrentTaskText;
end;

function TIKC_E810T.GetModemDriverMajorVersion: Byte;
begin
  Result:=mdm.prModemDriverMajorVersion;
end;

function TIKC_E810T.GetModemDriverMinorVersion: byte;
begin
  Result:=mdm.prModemDriverMinorVersion;
end;

function TIKC_E810T.GetModemDriverReleaseVersion: byte;
begin
  Result:=mdm.prModemDriverReleaseVersion;
end;

function TIKC_E810T.GetModemDriverBuildVersion: byte;
begin
  Result:=mdm.prModemDriverBuildVersion;
end;

end.
